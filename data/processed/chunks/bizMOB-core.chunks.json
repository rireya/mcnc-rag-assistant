[
  {
    "id": "5d01cb46_0000",
    "content": "/**\n * 01.클래스 설명 : bizMOBCore 최상위 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : bizMOBCore 최상위 클래스\n *\n * @author 김승현\n * @version 1.0\n *\n */\nvar bizMOBCore = {}; // NameSpace 정의\n\nbizMOBCore.name = 'bizMOBCore'; // NameSpace 명\nbizMOBCore.version = '4.0'; // bizMOBCore 버전\nbizMOBCore.readystatus = false; // bizMOB App이 initailize 작업이 완료된 후 ready event가 수행 되었는지 여부\nbizMOBCore.loglevel = '1248'; //Log(1)Debug(2)Warn(4)Error(8)\n\n/**\n *\n * 01.클래스 설명 : bizMOB App Plugin 호출시 Async 로 호출받을 Callback 함수 관리 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : Callback 함수 관리 클래스\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.CallbackManager = new Object(); // Callback Manager Class정의\n\nbizMOBCore.CallbackManager.servicename = 'CallbackManager'; // log 기록을 위한 클래스명 선언\n\nbizMOBCore.CallbackManager.index = 0; // 다중 PlugIn을 호출시 Callback Manager에서 callback함수를 저장하기 위해 저장스토리지 키를 유니크하게 만들어줄 index값 property 선언\n\nbizMOBCore.CallbackManager.storage = {};// 다중 PlugIn을 호출시 Callback Manager에서 일회성 callback함수를 저장하기 위해 저장 스토리지 객체 선언\n\nbizMOBCore.CallbackManager.listener = {}; // 다중 PlugIn을 호출시 Callback Manager에서 고정 callback함수를 저장하기 위해 저장 스토리지 객체 선언\n\n/**\n * Callback 함수 저장 메소드\n *\n * @param Function fCallback 저장 할 callback함수.\n * @param String sType 저장할 타입(stg : 1회성, lsn : 반복성 ).\n * @param String sName 저장할 콜백 이름(alias).\n *\n * @return String callbackId\n */\nbizMOBCore.CallbackManager.save = function(fCallback, sType, sName){\n\n var action = 'save'; // log기록을 위해 메소드명 정의\n var callbackId = ''; // CallbackManager에 저장할 콜백 함수명 정의 변수\n\n // Xross API중 Callback이 옵션일경우 callback 미 지정시 처리\n if(!fCallback){ \n \n bizMOBCore.Module.logger(this.servicename, action ,'L', 'Callback function is not defined.');\n // bizMOB App에서 Callback 함수 호출시 스크립트 에러를 방지하기 위해 Core모듈에 정의된 echo메소드를 이용하여 callback함수로 리턴되는 Response값을 로깅한다.\n fCallback = bizMOBCore.Module.echo;\n }\n\n // Callback 함수 특성을 구분하여 스토리지를 분리하여 저장한다. \n switch(sType){\n case 'listener' :\n // 반복성 고정 callback 을 사용시에 sType을 listener로 정의하여 CallbackManager.listener스토리지에 저장된다. \n callbackId = 'lsn'+this.index++;",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 0,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 616,
    "char_count": 2022,
    "created_at": "2025-08-01T16:17:10.825Z"
  },
  {
    "id": "5d01cb46_0001",
    "content": "// Callback 함수 특성을 구분하여 스토리지를 분리하여 저장한다. \n switch(sType){\n case 'listener' :\n // 반복성 고정 callback 을 사용시에 sType을 listener로 정의하여 CallbackManager.listener스토리지에 저장된다. \n callbackId = 'lsn'+this.index++;\n\n // listener에 callbackID랑 callback함수 저장\n this.listener[callbackId] = fCallback;\n bizMOBCore.Module.logger(this.servicename, action, 'L', ' Callback listener saved the function at '+callbackId+' area.');\n break;\n case 'custom' :\n // 개발자가 callback함수를 특정이름으로 사용하고 싶을때, index로 인해 임의의 callback함수명을 받고 싶지 않을때 sName을 파라미터로 전달하고 해당 값으로 callbackID를 지정 하여 callback함수명을 저장한다.\n if (sName) {\n callbackId = 'cst_'+sName;\n } else {\n callbackId = 'cst_'+this.index++;\n }\n\n this.listener[callbackId] = fCallback;\n bizMOBCore.Module.logger(this.servicename, action, 'L', ' Callback listener saved the function at '+callbackId+' area.');\n break;\n default :\n // callback 타입이 별도 지정 된값이 없으면 1회성 callback으로 CallbackManager.storage에 저장\n callbackId = 'stg'+this.index++;\n\n // storage에 callbackID랑 callback함수 저장\n this.storage[callbackId] = fCallback;\n bizMOBCore.Module.logger(this.servicename, action, 'L', ' Callback storage saved the function at '+callbackId+' area.');\n break;\n }\n\n return callbackId;\n\n};\n\n/**\n * bizMOB App Plugin에서 결과값 Return을 위해 호출할 고정 Callback 함수 처리 메소드\n *\n * @param Object oCallback Xross에서 실행할 콜백 데이타.\n * @param Object oResdata 호출했던 App PlugIn 처리 결과 데이타.\n *\n * @return null\n */\nbizMOBCore.CallbackManager.responser = function(oCallback, oResdata, oServiceInfo){\n\n // bizMOB App plugin으로 부터 결과가 callback으로 호출되었음을 로깅\n bizMOBCore.Module.logger(this.servicename, 'responser', 'L', 'CallbackManager recieve response from bizMOB App : ' );\n\n // bizMOB App plugin으로 부터 결과가 예외 오류가 발생했는지 확인\n if(oCallback.callback == 'exception'){\n bizMOBCore.Module.logger(this.servicename, 'responser', 'E', 'Recieve Message is ' + JSON.stringify(oResdata) );\n return;\n }\n\n // CallbackManager에 저장된 스토리지 위치를 찾기 위해 콜백정보 데이터에서 callbackID prefix값을 비교하여 스토리지를 찾은 후 해당 callbackID로 콜백함수를 실행.\n if(oCallback.callback.indexOf('stg') == 0){",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 1,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 588,
    "char_count": 2003,
    "created_at": "2025-08-01T16:17:10.825Z"
  },
  {
    "id": "5d01cb46_0002",
    "content": "// CallbackManager에 저장된 스토리지 위치를 찾기 위해 콜백정보 데이터에서 callbackID prefix값을 비교하여 스토리지를 찾은 후 해당 callbackID로 콜백함수를 실행.\n if(oCallback.callback.indexOf('stg') == 0){\n\n bizMOBCore.Module.logger(this.servicename, 'responser', 'D', oCallback.callback + ' call from the storage : ' );\n // 스토리지내 콜백함수를 실행\n this.storage[oCallback.callback](oResdata.message, oServiceInfo); // 네이티브에서 온 message와 함께 전달\n // 1회성 콜백함수는 호출 후 스토리지에서 삭제\n delete this.storage[oCallback.callback]; \n bizMOBCore.Module.logger(this.servicename, 'responser', 'I', oCallback.callback+' function called and removed.');\n\n }else if(oCallback.callback.indexOf('lsn') == 0 || oCallback.callback.indexOf('cst') == 0){\n // 스토리지내 콜백함수를 실행\n bizMOBCore.Module.logger(this.servicename, 'responser', 'D', oCallback.callback + ' call from the listener : ' );\n this.listener[oCallback.callback](oResdata.message, oServiceInfo);\n\n }else{\n // bizMOB App PlugIn 호출이 아닌 경우의 콜백 함수.\n \n bizMOBCore.Module.logger(this.servicename, 'responser', 'D', oCallback.callback + ' call from the page : ' );\n\n var tempcall;\n\n try{\n // bizMOB App PlugIn 호출이 아닌 xross API호출시 직접 콜백 함수를 실행.\n tempcall = eval(oCallback.callback);\n tempcall.call(undefined, oResdata.message, oServiceInfo);\n }catch(e){\n // 직접 콜백 함수 실행시 오류가 발생하면 에러 메세지 처리\n if(tempcall == undefined ){\n bizMOBCore.Module.logger(this.servicename, 'responser', 'E', 'Callback does not exist. : ' + JSON.stringify(oCallback.callback));\n\n }else if(tempcall.constructor !== Function){\n bizMOBCore.Module.logger(this.servicename, 'responser', 'E', 'Callback is not a function. : ' + JSON.stringify(oCallback.callback));\n }\n }\n\n }\n\n};\n\n/**\n *\n * 01.클래스 설명 : bizMOBCore클래스 App PlugIn 기능 요청을 위한 공통 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : Callback 함수 관리 클래스\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.Module = new Object(); //Module 클래스 정의\n\nbizMOBCore.Module.servicename = 'AppModule'; //Module 클래스 이름 정의\nbizMOBCore.Module.config = {}; //Module 클래스 설정 정보 정의",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 2,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 563,
    "char_count": 1944,
    "created_at": "2025-08-01T16:17:10.825Z"
  },
  {
    "id": "5d01cb46_0003",
    "content": "bizMOBCore.Module.servicename = 'AppModule'; //Module 클래스 이름 정의\nbizMOBCore.Module.config = {}; //Module 클래스 설정 정보 정의\n\n/** Xross 3.x 에서 사용하던 url 호출방식에서 JSBridge방식으로 변경함에 따라 삭제\n* bizMOBCore.Module.cmdwatcher = false; //requester가 요청중인지 상태 check하기 위한변수\n* bizMOBCore.Module.cmdPosition = 0; //requester내에서 다음 요청을 처리하기 위한 index값\n*/\n\n/**\n * App PlugIn 호출전 파라미터 변수타입을 체크하기 위한 메소드\n *\n * @param Object oParams 확인될 파라미터 정보 객체.\n * @param Array aRequired 필수 파라미터 목록.\n *\n * @return boolean result 파라미터 체크 결과\n */\nbizMOBCore.Module.checkParam = function(oParams, aRequired){\n var action = 'checkParam'; // 함수 동작을 식별하기 위한 변수\n var typeList = { // 변수 타입에 대한 매핑 객체\n 'a': 'array',\n 'o': 'object',\n 'f': 'function',\n 'b': 'boolean',\n 's': 'string',\n 'n': 'number',\n 'v': 'variable',\n 'e': 'element',\n };\n\n var param = oParams || {}; // 전달된 파라미터 객체\n var paramKeys = Object.keys(param); // 전달된 파라미터 객체의 속성 목록\n var required = aRequired || []; // 필수 파라미터 목록\n var missingKeys = required.filter(function(key) { // 없는 필수 파라미터 목록\n return paramKeys.indexOf(key) === -1;\n });\n\n // 전달된 파라미터가 오브젝트가 아닌 경우\n if (typeof param !== 'object') {\n bizMOBCore.Module.logger(this.serviceName, action, 'E', 'Invalid parameter format. Parameter have to define JSON.'); // 로그 출력\n return false;\n }\n // 전달된 파라미터가 없는 경우\n else if (!paramKeys.length) {\n if (required.length == 0) { // 필수 파라미터가 없는 경우\n return true; // 유효성 검사 통과\n }\n else {\n bizMOBCore.Module.logger(this.serviceName, action, 'L', 'Cannot found parameters.'); // 로그 출력\n return false; // 유효성 검사 실패\n }\n }\n // 필수 파라미터가 없는 경우\n else if (missingKeys.length) {\n bizMOBCore.Module.logger(this.serviceName, action, 'E', 'Parameter is required. - ' + missingKeys.join(', ')); // 로그 출력\n return false;\n }\n // 정상 파라미터\n else {\n // 파라미터 객체 속성 순회\n for (var key in param) {\n if (Object.hasOwnProperty.call(param, key)) {\n var type = key.substring(1, 2); // key값 앞에 _s, _n...에서 s, n...을 추출\n var value = param[key]; // value",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 3,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 576,
    "char_count": 1918,
    "created_at": "2025-08-01T16:17:10.825Z"
  },
  {
    "id": "5d01cb46_0004",
    "content": "// 속성 값이 없는 경우\n if (value === undefined) {\n bizMOBCore.Module.logger(this.serviceName, action, 'L', 'Parameter is undefined. it skip check - ' + key); // 로그 출력\n }\n // 속성 값이 null인 경우\n else if (value === null) {\n bizMOBCore.Module.logger(this.serviceName, action, 'L', 'Parameter is null. it skip check. - ' + key); // 로그 출력\n }\n // 정의되지 않은 타입이면 false\n if (typeList[type] === undefined) {\n bizMOBCore.Module.logger(this.serviceName, action, 'E', 'Parameter is unknown variable type. - ' + key); // 로그 출력\n return false;\n }\n // 배열 타입인데, 배열이 아닌 경우 false\n else if (typeList[type] === 'array' && !Array.isArray(value)) {\n bizMOBCore.Module.logger(this.serviceName, action, 'E', 'Parameter is not an array. - ' + key); // 로그 출력\n return false;\n }\n // 배열 타입인데, 배열이 비어있는 경우 false\n else if (typeList[type] === 'array' && value.length === 0) {\n bizMOBCore.Module.logger(this.serviceName, action, 'E', 'Parameter is empty Array. - ' + key); // 로그 출력\n return false;\n }\n // 오브젝트 타입인데, 오브젝트가 아닌 경우 false\n else if (typeList[type] === 'object' && typeof value !== 'object') {\n bizMOBCore.Module.logger(this.serviceName, action, 'E', 'Parameter is not an object. - ' + key); // 로그 출력\n return false;\n }\n // 그 외 타입인데, 타입이 다른 경우 false\n else if (typeList[type] !== typeof value) {\n bizMOBCore.Module.logger(this.serviceName, action, 'E', 'Parameter have wrong value. - ' + key); // 로그 출력\n return false;\n }\n // variable 또는 element 타입인 경우 true\n else if (typeList[type] === 'variable' || typeList[type] === 'element') {\n return true;\n }\n // 유효성 검사 통과\n else {\n return true;\n }\n }\n }\n }\n};\n\n/**\n * bizMOB 3.x 에서 사용하던 App PlugIn 호출 메소드. Deprecated\n * Command Queue에 저장된 커맨드 순서대로 bizMOB App에 요청\n *\n * @param\n *\n * @return\n */\n/*\nbizMOBCore.Module.requester = function() {\n // 실제로 네이티브에 요청하는 부분\n var action = 'requester';",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 4,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 513,
    "char_count": 1788,
    "created_at": "2025-08-01T16:17:10.825Z"
  },
  {
    "id": "5d01cb46_0005",
    "content": "/**\n * bizMOB 3.x 에서 사용하던 App PlugIn 호출 메소드. Deprecated\n * Command Queue에 저장된 커맨드 순서대로 bizMOB App에 요청\n *\n * @param\n *\n * @return\n */\n/*\nbizMOBCore.Module.requester = function() {\n // 실제로 네이티브에 요청하는 부분\n var action = 'requester';\n\n if(this.cmdQueue.length > this.cmdPosition){\n bizMOBCore.Module.logger(this.servicename , action, 'D', (this.cmdPosition+1)+'th COMMAND Request.');\n document.location.href=this.cmdQueue[this.cmdPosition];\n this.cmdQueue[this.cmdPosition] = null;\n this.cmdPosition++;\n // this.cmdwatcher = true;\n setTimeout('bizMOBCore.Module.requester();', 200);\n }else{\n console.log('COMMAND Stopped!!');\n // this.cmdwatcher = false;\n }\n\n};\n*/\n\n/**\n * bizMOB APP api호출시 요청된 Data를 JSBridge 를 통해 App에 요청하는 메소드\n *\n * @param Object oMessage bizMOB App PlugIn에 전달될 파라미터 정보 객체.\n * @param String sServiceName 요청한 커맨드의 서비스명 정보.\n * @param String sAction 요청한 커맨드의 서비스내 기능 정보.\n * @param Object oServiceInfo bizMOB App에 전달하고 Core 로직을 위한 파라미터 정보 객체.\n *\n * @return\n */\nbizMOBCore.Module.gateway = function(oMessage, sServiceName, sAction, oServiceInfo){\n var action = 'gateway';\n\n oMessage.service_info = {};\n\n if(oServiceInfo){\n oMessage.service_info = oServiceInfo;\n }\n\n oMessage.service_info['sServiceName'] = sServiceName;\n oMessage.service_info['sAction'] = sAction;\n\n // oMessage JSON object --> string으로 바꾸어 줌\n // replacer: 숫자를 string으로 변환해 줌(webkit에서 오류나서)\n\n oMessage = JSON.stringify(oMessage, this.replacer, 3);\n\n bizMOBCore.Module.logger(this.servicename , action, 'D', 'Request Service: ' + sServiceName + ', Action: ' + sAction + ', Param: ' + oMessage);\n\n if(bizMOBCore.DeviceManager.isApp()){\n\n if( bizMOBCore.DeviceManager.isIOS() ){\n // IOS console log\n window.webkit.messageHandlers.BMCLogger.postMessage(oMessage);\n\n window.webkit.messageHandlers.BMCManager.postMessage(oMessage);\n } else {\n window.BMCManager.execPluginWithJSB(oMessage);\n }\n\n }else{\n bizMOBCore.Module.logger(sServiceName , sAction, 'D', 'This function doesn\\'t support in browser.');\n }\n\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 5,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 553,
    "char_count": 1979,
    "created_at": "2025-08-01T16:17:10.825Z"
  },
  {
    "id": "5d01cb46_0006",
    "content": "window.webkit.messageHandlers.BMCManager.postMessage(oMessage);\n } else {\n window.BMCManager.execPluginWithJSB(oMessage);\n }\n\n }else{\n bizMOBCore.Module.logger(sServiceName , sAction, 'D', 'This function doesn\\'t support in browser.');\n }\n\n};\n\n/**\n * 메세지 Data중 Command 요청시 오류가 발생하는 Data처리 함수\n *\n * @param String sKey Data의 키값.\n * @param Variable vValue 변경할 데이터.\n *\n * @return vValue 가공된 데이터\n */\nbizMOBCore.Module.replacer = function(sKey, vValue) {\n // 숫자를 string type으로 바꾸어 줌(number로 하면 오작동 하는 경우 발생)\n if (typeof vValue === 'number' && !isFinite(vValue)) {\n return String(vValue);\n }\n return vValue;\n};\n\n/**\n * JSON Object를 String으로 변환\n *\n * @param Variable vValue 변경할 데이터.\n *\n * @return value String으로 변환된 값.\n */\nbizMOBCore.Module.stringjson = function(vValue) {\n // Object -> String\n var value = vValue!=undefined && vValue!=null ? JSON.stringify(vValue) : '';\n return value;\n\n};\n\n/**\n *String을 JSON Object으로 변환\n *\n * @param Variable vValue 변경할 데이터.\n *\n * @return String vValue String으로 변환된 값.\n */\nbizMOBCore.Module.parsejson = function(vValue) {\n // String -> Object\n var retValue;\n\n // 숫자를 다시 Object로 변환 할 때, 0으로 시작하면 8진수로 오작동 할 수 있으므로\n if ( vValue != undefined && vValue.slice(0, 1) != '0' && vValue != '' ) {\n retValue = JSON.parse(vValue);\n }\n\n return retValue;\n\n};\n\n/**\n *File 클래스내에서 FilePath지정시 지정위치 키워드 처리\n *\n * @param String sPath 변경할 FilePath 값.\n *\n * @return Object splitPathType FilePath 정보를 분할한 Data Object.\n */\nbizMOBCore.Module.pathParser = function(sPath) {\n // bizMOB App 인터페이스 parsing을 위해 경로 분리\n var splitPathType = {};\n var regExp = new RegExp('{(.*?)}/(.*)','g');\n var result = regExp.exec(sPath);\n\n if(result){\n // {contents}/bizMOB/sign.bmp\n // result[1]: {contents}\n // result[2]: bizMOB/sign.bmp\n splitPathType.type = result[1] ? result[1] : 'absolute';\n splitPathType.path = result[2];\n }else {\n splitPathType.type = 'absolute';\n splitPathType.path = sPath;\n }\n return splitPathType;\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 6,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 542,
    "char_count": 1914,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0007",
    "content": "/**\n *bizMOB App 요청시 정의된 Callback함수가 없을경우 Default로 지정될 함수\n *\n * @param Object oReturnValue bizMOB App로 부터 전달된 데이터 값.\n *\n * @return\n */\nbizMOBCore.Module.echo = function(oReturnValue){\n // callback이 option일때 callback이 없으면 script에러 나서 echo callback만들어 줌\n var action = 'echo';\n bizMOBCore.Module.logger('Module', action ,'L', 'Echo callback . : ');\n if(oReturnValue.constructor !== Event){\n bizMOBCore.Module.logger('Module', action ,'D', 'callback parameter . : '+ JSON.stringify(oReturnValue));\n }\n\n};\n\n/**\n * Log 출력\n *\n * @param String sServiceName 요청한 커맨드의 서비스명 정보.\n * @param String sAction 요청한 커맨드의 서비스내 기능 정보.\n * @param String sLogtype 로그 레벨\n * @param String sMessage 로그 메세지\n *\n * @return\n */\nbizMOBCore.Module.logger = function(sService, sAction, sLogtype, sMessage){\n // 릴리즈 환경에서는 로그 출력 안함.\n if (bizMOBCore.App.config._bIsRelease) return;\n\n // 콘솔 로그 타입 스타일 정의\n var baseStyle = 'padding: 2px 4px; border-radius: 2px;';\n var infoStyle = baseStyle + ' color: white; background: #1a73e8;';\n var logStyle = baseStyle + ' color: white; background: #546e7a;';\n var debugStyle = baseStyle + ' color: white; background: #009688;';\n var warnStyle = baseStyle + ' color: white; background: #ffbb33;';\n var errorStyle = baseStyle + ' color: white; background: #d9534f;';\n\n // 콘솔 로그 Class 스타일 정의\n var bracketStyle = 'font-weight: bold;';\n var infoBracketStyle = bracketStyle + ' color: #1a73e8;';\n var logBracketStyle = bracketStyle + ' color: #546e7a;';\n var debugBracketStyle = bracketStyle + ' color: #009688;';\n var warnBracketStyle = bracketStyle + ' color: #ffbb33;';\n var errorBracketStyle = bracketStyle + ' color: #d9534f;';\n\n var msg = '';\n\n // JSON.stringify 오류시 빈 값으로 처리\n try {\n msg = typeof sMessage === 'object' ? JSON.stringify(sMessage) : sMessage;\n } catch (error) {\n msg = '';\n }\n\n var trace = '[App]['+sService+']'+'['+sAction+']';\n var log = msg.replace(/\\{/gi, '\\n{').replace(/\\}/gi, '}\\n').replace(/\\\\\"/gi, '');\n\n var logLevel = bizMOBCore.DeviceManager.getInfo({ _sKey: 'web_log_level' }) || bizMOBCore.loglevel;",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 7,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 566,
    "char_count": 2027,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0008",
    "content": "var trace = '[App]['+sService+']'+'['+sAction+']';\n var log = msg.replace(/\\{/gi, '\\n{').replace(/\\}/gi, '}\\n').replace(/\\\\\"/gi, '');\n\n var logLevel = bizMOBCore.DeviceManager.getInfo({ _sKey: 'web_log_level' }) || bizMOBCore.loglevel;\n\n if (typeof logLevel == 'string' && logLevel.length == 4) {\n var logLevelArr = logLevel.split('');\n\n if (bizMOBCore.DeviceManager.isApp() && bizMOBCore.DeviceManager.isIOS() ) {\n window.webkit.messageHandlers.BMCLogger.postMessage('bizMOB LOG: ' + trace + ' - ' + log);\n }\n\n switch(sLogtype) {\n case 'I' :\n if (logLevelArr[0].indexOf('1') > -1) {\n console.info('%c bizMOB INFO %c ' + '%c' + trace + '%c ' + log, infoStyle, '', infoBracketStyle, '');\n }\n break;\n case 'L' :\n if (logLevelArr[0].indexOf('1') > -1) {\n console.info('%c bizMOB LOG %c ' + '%c' + trace + '%c ' + log, logStyle, '', logBracketStyle, '');\n }\n break;\n case 'D' :\n if (logLevelArr[1].indexOf('2') > -1) {\n console.info('%c bizMOB DEBUG %c ' + '%c' + trace + '%c ' + log, debugStyle, '', debugBracketStyle, '');\n }\n break;\n case 'W' :\n if (logLevelArr[2].indexOf('4') > -1) {\n console.info('%c bizMOB WARN %c ' + '%c' + trace + '%c ' + log, warnStyle, '', warnBracketStyle, '');\n }\n break;\n case 'E' :\n if (logLevelArr[3].indexOf('8') > -1) {\n console.info('%c bizMOB ERROR %c ' + '%c' + trace + '%c ' + log, errorStyle, '', errorBracketStyle, '');\n }\n break;\n }\n }\n};\n\n/**\n * Core 초기화 작업\n *\n * @param Object oRequired 발생 이벤트 Data객체\n * @param Object oOptions 이벤트에 전달될 메세지 Data객체\n *\n * @return\n */\nbizMOBCore.Module.init = function(oRequired, oOptions){\n\n var action = 'init';\n bizMOBCore.Module.logger(this.servicename, action, 'D', 'bizMOBCore Initailizing start.');\n\n /**\n * initXross에서 필요 값 셋팅으로 변경\n * - 제이쿼리 제거로 인한 $.ajax 제거\n */\n // bizMOBCore.APP_CONFIG = $.ajax({ \"url\" : \"../../bizMOB/config/app.config\", \"async\" : false, \"cache\" : false, \"dataType\" : \"JSON\" }).responseJSON;\n\n bizMOBCore.DeviceManager.init();\n bizMOBCore.EventManager.init();\n\n bizMOBCore.Module.logger(this.servicename, action ,'L', 'bizMOB Module initialized. ');\n\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 8,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 564,
    "char_count": 2053,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0009",
    "content": "bizMOBCore.DeviceManager.init();\n bizMOBCore.EventManager.init();\n\n bizMOBCore.Module.logger(this.servicename, action ,'L', 'bizMOB Module initialized. ');\n\n};\n\n/**\n * 01.클래스 설명 : bizMOB Window 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : bizMOB Client에서 생성하는 Window 객체\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.Window = new Object();\n\nbizMOBCore.Window.servicename = 'Window';\nbizMOBCore.Window.config = {};\n\n/**\n * SignPad(서명) Window 띄우기\n *\n * @param String _sTargetPath 사인패드에서 서명한 이미지를 저장할 File Path.\n * @param Function _fCallback 사인패드 처리 결과값을 받을 callback 함수.\n *\n * @return\n */\nbizMOBCore.Window.openSignPad = function() {\n\n var action = 'openSignPad';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var splitTargetPath = bizMOBCore.Module.pathParser(arguments[0]._sTargetPath);\n\n var oldparam = {\n target_path_type : splitTargetPath.type,\n target_path : splitTargetPath.path,\n callback:callback\n };\n\n var tr = {\n id:'OPEN_SIGNATURE',\n param:{}\n };\n\n var params = Object.assign({}, {\n callback: 'bizMOBCore.Module.echo'\n }, oldparam);\n\n tr.param = params;\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * File Explorer(탐색기) Window 띄우기\n *\n *\n * @return Object File 정보 객체\n */\nbizMOBCore.Window.openFileExplorer = function() {\n\n var action = 'openFileExplorer';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id:'CALL_FILE_BROWSER',\n param:{\n 'types' : arguments[0]._atype,\n 'callback' : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * ImageViewer 띄우기\n *\n * @param String _sImagePath 이미지 뷰어로 열 이미지 File Path.\n * @param Function _fCallback 이미지 뷰어 Close시 결과값을 받을 callback함수.\n *\n * @return\n */\nbizMOBCore.Window.openImageViewer = function() {\n\n var action = 'openImageViewer';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sImagePath);",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 9,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 543,
    "char_count": 1973,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0010",
    "content": "var action = 'openImageViewer';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sImagePath);\n\n var oldparam = {\n 'source_path' : splitSourcePath.path,\n 'source_path_type' : splitSourcePath.type,\n 'orientation' : 'auto',\n callback : callback\n };\n\n var tr = {\n id:'OPEN_IMAGE_VIEW',\n param:{}\n };\n\n var params = Object.assign({}, {\n callback: 'bizMOBCore.Module.echo'\n }, oldparam);\n\n tr.param = params;\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * CodeReader( BarCode, QRCode ) 띄우기\n *\n * @param Function _fCallback Code 판독 결과값을 받을 callback함수.\n *\n * @return\n */\nbizMOBCore.Window.openCodeReader = function() {\n\n var action = 'openCodeReader';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var oldparam = {\n callback:callback\n };\n\n var tr = {\n id:'OPEN_CODE_READER',\n param:{}\n };\n\n var params = Object.assign({}, {\n message:{},\n callback: 'bizMOBCore.Module.echo'\n }, oldparam);\n\n tr.param = params;\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n *\n * 01.클래스 설명 : Properties 저장 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : 영구 데이터 저장소\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.Properties = new Object();\n\nbizMOBCore.Properties.servicename = 'Properties';\nbizMOBCore.Properties.config = {};\n\n/**\n * Properties 데이터 저장\n *\n * @param Variable _aList또는_sKey 저장할 데이터\n * @param Variable _vValue 저장할 값(_sKey와 쌍으로 들어옴.)\n *\n * @return\n */\nbizMOBCore.Properties.set = function() {\n\n var action = 'set';\n var tr = {\n call_type:'js2stg',\n id:'SET_FSTORAGE',\n param:{data:[]}\n };\n\n // bizMOB App한테 주기 전에 데이터 정리하는 용도의 array\n var properties = [];\n\n if(arguments[0]._aList)\n {\n var savelist = arguments[0]._aList;\n for(var i=0;i < savelist.length ; i++){",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 10,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 502,
    "char_count": 1820,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0011",
    "content": "var action = 'set';\n var tr = {\n call_type:'js2stg',\n id:'SET_FSTORAGE',\n param:{data:[]}\n };\n\n // bizMOB App한테 주기 전에 데이터 정리하는 용도의 array\n var properties = [];\n\n if(arguments[0]._aList)\n {\n var savelist = arguments[0]._aList;\n for(var i=0;i < savelist.length ; i++){\n\n properties.push({key:savelist[i]._sKey, value:bizMOBCore.Module.stringjson(savelist[i]._vValue)});\n // set하고 바로 get하고 싶을 때(개발자 입장에서 로직에따라)\n window.bizMOB.FStorage[savelist[i]._sKey] = bizMOBCore.Module.stringjson(savelist[i]._vValue);\n }\n }else{\n properties.push({key:arguments[0]._sKey, value:bizMOBCore.Module.stringjson(arguments[0]._vValue)});\n window.bizMOB.FStorage[arguments[0]._sKey] = bizMOBCore.Module.stringjson(arguments[0]._vValue);\n }\n\n tr.param.data = properties;\n bizMOBCore.Module.logger(this.servicename, action ,'D', arguments[0]._sKey+ ' set on bizMOB Properties. ');\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * Properties 데이터 불러오기\n *\n * @param String _sKey 저장 값의 키\n *\n * @return\n */\nbizMOBCore.Properties.get = function() {\n var action = 'get';\n var key = arguments[0]._sKey;\n\n // bizMOB App에 요청 없이 FStorage에서 get\n if(window.bizMOB.FStorage[key]){\n return bizMOBCore.Module.parsejson( window.bizMOB.FStorage[key]);\n }else{\n return null;\n }\n\n};\n\n/**\n * Properties 데이터 삭제\n *\n * @param String _sKey 저장 값의 키\n *\n * @return\n */\nbizMOBCore.Properties.remove = function() {\n var action = 'remove';\n var key = arguments[0]._sKey;\n\n // bizMOB App에서 지우기\n var tr = {\n id:'REMOVE_FSTORAGE',\n param:{data:[key]}\n };\n // FStorage에서 지우기\n delete window.bizMOB.FStorage[key];\n\n bizMOBCore.Module.logger(this.servicename, action ,'D', arguments[0]._sKey+ ' removed on bizMOB Properties. ');\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 11,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 484,
    "char_count": 1754,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0012",
    "content": "bizMOBCore.Module.logger(this.servicename, action ,'D', arguments[0]._sKey+ ' removed on bizMOB Properties. ');\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n *\n * 01.클래스 설명 : System 기능 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : OS 기반 기본 기능\n * 04.관련 API/화면/서비스 : bizMOBCore.Module.checkParam,bizMOBCore.System.callBrowser, bizMOBCore.System.callCamera, bizMOBCore.System.callGallery, bizMOBCore.System.callMap, bizMOBCore.System.callSMS, bizMOBCore.System.callTEL, bizMOBCore.System.getGPS\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.System = new Object();\n\nbizMOBCore.System.servicename = 'System';\nbizMOBCore.System.config = {};\n\n/**\n * 전화걸기\n *\n * @param String _sNumber 전화번호\n * @param Function _fCallback 실행후 결과를 처리할 callback 함수\n *\n * @return\n */\nbizMOBCore.System.callTEL = function() {\n\n var action = 'callTEL';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var number = arguments[0]._sNumber ? (arguments[0]._sNumber.match(/(^[+0-9])|[0-9]/gi).join('')) : '';\n\n var tr = {\n id:'TEL',\n param:{\n number: number,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 문자보내기\n *\n * @param Array _aNumber 메세지를 보낼 전화번호 배열\n * @param String _sMessage 보낼 메세지\n * @param Function _fCallback 실행후 결과를 처리할 callback 함수\n *\n * @return\n */\nbizMOBCore.System.callSMS = function() {\n\n var action = 'callSMS';\n //var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var cell_list = arguments[0]._aNumber;\n\n for(var i=0; i< cell_list.length ; i++)\n {\n var validvalue = cell_list[i].match(/(^[+0-9])|[0-9]/gi);\n if(validvalue != null){\n cell_list[i] = validvalue.join('');\n }else{\n bizMOBCore.Module.logger(this.servicename, action ,'E', cell_list[i]+ ' is wrong number format.');\n }\n }\n\n arguments[0]._aNumber = cell_list;\n\n var tr = {\n id:'SMS',\n // ;로 구분해서 string으로 보냄\n param:{number:arguments[0]._aNumber.join(';'), message:arguments[0]._sMessage}\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 12,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 563,
    "char_count": 2034,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0013",
    "content": "arguments[0]._aNumber = cell_list;\n\n var tr = {\n id:'SMS',\n // ;로 구분해서 string으로 보냄\n param:{number:arguments[0]._aNumber.join(';'), message:arguments[0]._sMessage}\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 단말기에 설치된 브라우져 열기\n *\n * @param String _sURL 메세지를 보낼 전화번호 배열\n *\n * @return\n */\nbizMOBCore.System.callBrowser = function(){\n\n var action = 'callBrowser';\n\n var tr = {\n\n id:'CALL_EXTERNAL_BROWSER',\n param:{ 'url':arguments[0]._sURL }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * 단말기 디바이스의 갤러리(사진앨범) 보기\n *\n * @param String _sType String (Default : all) 갤러리에서 불러올 미디어 타입( all, image, video )가 있습니다.\n * @param Function _fCallback 갤러리에서 선택한 미디어를 결과를 전달 받아서 처리할 callback 함수.\n\n *\n * @return\n */\nbizMOBCore.System.callGallery = function(){\n\n var action = 'callGallery';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n switch(arguments[0]._sType) {\n case 'all' :\n arguments[0]._sType = ['video','image'];\n break;\n case 'video' :\n arguments[0]._sType = ['video'];\n break;\n case 'image' :\n arguments[0]._sType = ['image'];\n break;\n default :\n arguments[0]._sType = ['video','image'];\n break;\n }\n\n var tr = {\n id:'OPEN_MEDIA_PICKER',\n param:{\n type_list : arguments[0]._sType,\n max_count : arguments[0]._nMaxCount,\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * 단말기 지도 실행\n *\n * @param String _sLocation 위치 정보(주소, 위경도값)\n *\n * @return\n */\nbizMOBCore.System.callMap = function() {\n\n var action = 'callMap';\n\n var tr = {\n id:'SHOW_MAP',\n param:{\n location:arguments[0]._sLocation\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * OS별 지도 실행\n *\n * @param String _sLocation 위치 정보(주소, 위경도값)\n *\n * @return\n */\nbizMOBCore.System.getGPS = function()\n{\n var action = 'getGPS';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id:'GET_LOCATION',\n param:{\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 13,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 571,
    "char_count": 2036,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0014",
    "content": "var tr = {\n id:'GET_LOCATION',\n param:{\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * 단말기 카메라 촬영\n *\n * @param Function _fCallback 갤러리에서 선택한 미디어를 전달 받아서 처리하는 callback 함수\n * @param String _sFileName 찍은 이미지를 저장할 이름\n * @param String _sDirectory 찍은 이미지를 저장할 경로\n * @param Boolean _bAutoVerticalHorizontal (Default : true) 찍은 이미지를 화면에 맞게 자동으로 회전시켜 저장할지를 설정 값\n *\n * @return\n */\nbizMOBCore.System.callCamera = function()\n{\n var action = 'callCamera';\n\n var splitTargetDir = bizMOBCore.Module.pathParser(arguments[0]._sDirectory);\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n // bAutoVerticalHorizontal: 사진을 자동으로 가로 세로 맞춰주는 옵션\n var autoVerticalHorizontal = arguments[0]._bAutoVerticalHorizontal === false ? false : true;\n\n var tr = {\n id:'CALL_CAMERA',\n param:{\n target_directory: splitTargetDir.path,\n target_directory_type: splitTargetDir.type,\n picture_name:arguments[0]._sFileName,\n rotate : autoVerticalHorizontal,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n *\n * 01.클래스 설명 : App 컨트롤 관련 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : App 컨트롤 관련 기능\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.App = new Object();\n\nbizMOBCore.App.servicename = 'App';\nbizMOBCore.App.config = {\n _sAppKey: '', // AppKey\n _bIsRelease: false, // 배포 빌드 여부\n};\n\n/**\n * App 프로그래스바 열기\n *\n * @param Function _fCallback 실행 후 호출될 callback 함수\n *\n * @return\n */\nbizMOBCore.App.openProgress = function(){\n\n var action = 'openProgress';\n if(arguments[0] == undefined) { arguments[0] = {}; }\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n 'id': 'PROGRESS_CONTROLLER',\n 'param': {\n 'type' : 'show' ,\n 'callback' : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * App 프로그래스바 닫기\n *\n *@param Function _fCallback 실행 후 호출될 callback 함수\n *\n * @return\n */\nbizMOBCore.App.closeProgress = function(){",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 14,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 562,
    "char_count": 1977,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0015",
    "content": "bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * App 프로그래스바 닫기\n *\n *@param Function _fCallback 실행 후 호출될 callback 함수\n *\n * @return\n */\nbizMOBCore.App.closeProgress = function(){\n\n var action = 'closeProgress';\n if(arguments[0] == undefined) { arguments[0] = {}; }\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n 'id': 'PROGRESS_CONTROLLER',\n 'param': {\n 'type' : 'close' ,\n 'callback' : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * App 종료\n *\n * @param String _sType (Default : kill)어플리케이션 종료 유형( logout 또는 kill )\n *\n * @return\n */\nbizMOBCore.App.exit = function(){\n\n var action = 'exit';\n var type = arguments[0]._sType ? arguments[0]._sType : 'kill';\n\n var tr = {\n 'id': 'EXIT_APP',\n 'param': {'kill_type' : type }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * App 자동 종료 시간 설정\n *\n * @param Number _nSeconds ( default : 7200 )어플리케이션의 세션 만료 시간(초단위) 설정 값.\n * @param Variable _vMessage 세션 종료시 표시할 메세지\n *\n * @return\n */\nbizMOBCore.App.requestTimeout = function(){\n\n var action = 'requestTimeout';\n\n var callback = arguments[0]._fCallback ? bizMOBCore.CallbackManager.save(arguments[0]._fCallback) : '' ;\n\n var tr = {\n 'id': 'SET_INACTIVE_TIMEOUT',\n 'param': {\n 'callback':callback,\n 'session_timeout': arguments[0]._nSeconds,\n 'message': arguments[0]._vMessage\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * App 자동 종료 시간 조회\n *\n * @param Variable _vMessage 세션 종료시 표시할 메세지\n * @param Function _fCallback 서버와 통신 후 실행될 callback 함수\n *\n * @return\n */\nbizMOBCore.App.getTimeout = function(){\n\n var action = 'getTimeout';\n var seconds = -1; // 조회시 -1로 설정\n var callback = arguments[0]._fCallback ? bizMOBCore.CallbackManager.save(arguments[0]._fCallback) : '' ;\n\n var tr = {\n 'id': 'SET_INACTIVE_TIMEOUT',\n 'param': {\n 'callback':callback,\n 'session_timeout': seconds,\n 'message': ''\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 15,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 559,
    "char_count": 2010,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0016",
    "content": "var tr = {\n 'id': 'SET_INACTIVE_TIMEOUT',\n 'param': {\n 'callback':callback,\n 'session_timeout': seconds,\n 'message': ''\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * App 스플래시가 수동 조작인 경우 종료 기능\n *\n * @param Function _fCallback 서버와 통신 후 실행될 callback 함수\n *\n * @return\n */\nbizMOBCore.App.hideSplash = function(){\n\n var action = 'hideSplash';\n var callback = arguments[0]._fCallback ? bizMOBCore.CallbackManager.save(arguments[0]._fCallback) : '' ;\n\n var tr = {\n 'id': 'HIDE_SPLASH',\n 'param': {\n 'callback':callback,\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n *\n * 01.클래스 설명 : Web Storage 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : 휘발성 데이터 저장소\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.Storage = new Object();\n\nbizMOBCore.Storage.servicename = 'Storage';\nbizMOBCore.Storage.config = {};\n\n/**\n * Storage 데이터 저장\n *\n * 24-04-09 mhchoi:\n * - bizMOB 4.n 이상 부터는 도메인 기반이라 localStorage에 저장하면 영구적으로 저장됨.\n * - 기존에 3.n 에서 Storage는 휘발성 데이터로 사용했기 때문에 동일한 구조를 유지하기 위해 sessionStorage로 변경\n *\n * @param Variable _aList또는_sKey 저장할 데이터\n * @param Variable _vValue 저장할 값(_sKey와 쌍으로 지정됨)\n *\n * @return\n */\nbizMOBCore.Storage.set = function() {\n\n var action = 'set';\n\n // 1. Array로 올 때\n if(arguments[0]._aList)\n { var savelist = arguments[0]._aList;\n for(var i=0;i < savelist.length ; i++){\n // HTML5에 있는 sessionStorage 저장\n // storage는 브라우저 web storage\n sessionStorage.setItem ( savelist[i]._sKey , bizMOBCore.Module.stringjson(savelist[i]._vValue) );\n }\n // 2. Key value로 들어 올 때\n }else{\n sessionStorage.setItem ( arguments[0]._sKey , bizMOBCore.Module.stringjson(arguments[0]._vValue) );\n }\n\n bizMOBCore.Module.logger(this.servicename, action ,'D', arguments[0]._sKey+ ' set on bizMOB Storage. ');\n\n};\n\n/**\n * Storage 데이터 불러오기\n *\n * @param String _sKey 저장 값의 키\n *\n * @return\n */\nbizMOBCore.Storage.get = function() {\n\n var action = 'get';\n var key = arguments[0]._sKey;\n\n var value = sessionStorage.getItem ( key );\n\n return bizMOBCore.Module.parsejson(value);\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 16,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 576,
    "char_count": 2020,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0017",
    "content": "};\n\n/**\n * Storage 데이터 불러오기\n *\n * @param String _sKey 저장 값의 키\n *\n * @return\n */\nbizMOBCore.Storage.get = function() {\n\n var action = 'get';\n var key = arguments[0]._sKey;\n\n var value = sessionStorage.getItem ( key );\n\n return bizMOBCore.Module.parsejson(value);\n};\n\n/**\n * Storage 데이터 삭제\n *\n * @param String _sKey 저장 값의 키\n *\n * @return\n */\nbizMOBCore.Storage.remove = function() {\n\n var action = 'remove';\n\n sessionStorage.removeItem(arguments[0]._sKey);\n\n bizMOBCore.Module.logger(this.servicename, action ,'D', arguments[0]._sKey+ ' removed on bizMOB Storage. ');\n\n};\n\n/**\n *\n * 01.클래스 설명 : Network 통신 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : bizMOB Server와 통신\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.Network = new Object();\n\nbizMOBCore.Network.servicename = 'Network';\nbizMOBCore.Network.config = {\n _sJwtToken: '', // JWT Token\n};\n\nbizMOBCore.Network.index = 0;\n\nbizMOBCore.Network.callbackStorage = {};\n\nbizMOBCore.Network.changeLocale = function(arg) {\n // 언어 코드 (ko, ko-KR, en, en-US, ...)\n var localeCode = arg._sLocaleCd;\n // full locale 값 조회\n var fullLocale = bizMOBCore.Localization.getFullLocale(localeCode);\n\n // Web 환경에 맞는 언어코드 변경 로직\n bizMOBCore.Localization.locale = fullLocale;\n bizMOBCore.Module.logger(this.serviceName, 'changeLocale', 'L', 'Network locale change: ' + fullLocale);\n};\n\nbizMOBCore.Network.httpHeader = function() {\n var arg = arguments[0] || {};\n var httpHeader = arg._oHttpHeader || null; // http header\n var headers = Object.assign({}, {\n // 컨텐츠 타입\n 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n }, httpHeader);\n\n // 언어 코드 추가\n if (bizMOBCore.Localization.locale && !headers['Accept-Language']) {\n headers['Accept-Language'] = bizMOBCore.Localization.locale;\n }\n\n // JWT Token 존재시 추가\n if (arg._sTrcode !== 'LOGIN' && bizMOBCore.Network.config._sJwtToken) {\n headers['Authorization'] = 'Bearer ' + bizMOBCore.Network.config._sJwtToken;\n }\n\n return headers;\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 17,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 532,
    "char_count": 1935,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0018",
    "content": "// JWT Token 존재시 추가\n if (arg._sTrcode !== 'LOGIN' && bizMOBCore.Network.config._sJwtToken) {\n headers['Authorization'] = 'Bearer ' + bizMOBCore.Network.config._sJwtToken;\n }\n\n return headers;\n};\n\n/**\n * bizMOB Server 전문 통신\n *\n * @param String _sTrcode bizMOB Server 전문코드\n * @param String _oHeader bizMOB Server 전문 Header 객체\n * @param String _oBody bizMOB Server 전문 Body 객체\n * @param Boolean _bProgressEnable (default:true) 서버에 통신 요청시 progress 표시 여부( true 또는 false )\n * @param Number _nTimeout (default: 60) 서버에 통신 요청시 timeout 시간 (sec)\n * @param Function _fCallback 서버와 통신 후 실행될 callback 함수\n *\n * @return\n */\nbizMOBCore.Network.requestTr = function(arg) {\n var timeout = arg._nTimeout ? arg._nTimeout : 60;\n var message = {\n header: Object.assign({}, {\n result: true,\n error_code: '',\n error_text: '',\n info_text: '',\n message_version: '',\n login_session_id: '',\n trcode: arg._sTrcode\n }, arg._oHeader),\n body: arg._oBody\n };\n var httpHeader = bizMOBCore.Network.httpHeader({\n _sTrcode: arg._sTrcode,\n _oHttpHeader: arg._oHttpHeader\n });\n\n var action = 'requestTr';\n var progressEnable = arg._bProgressEnable === false ? false : true; // progress 진행 표시\n var tr = {\n id: 'REQUEST_TR',\n param: {\n trcode: arg._sTrcode,\n message: message,\n callback: bizMOBCore.CallbackManager.save(arg._fCallback),\n read_timeout: timeout,\n progress: progressEnable,\n header : httpHeader\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 18,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 393,
    "char_count": 1437,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0019",
    "content": "bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * bizMOB Server 로그인(인증)전문 통신\n *\n * @param String _sUserId 인증 받을 사용자 아이디\n * @param String _sPassword 인증 받을 사용자 패스워드\n * @param String _sTrcode 레거시 로그인 인증 전문코드\n * @param String _oHeader 레거시 로그인 인증 전문 Header 객체\n * @param String _oBody 레거시 로그인 인증 전문 Body 객체\n * @param Function _fCallback 서버와 통신 후 실행될 callback 함수\n * @param Boolean _bProgressEnable (default:true) 서버에 통신 요청시 progress 표시 여부( true 또는 false )\n * @param Number _nTimeout (default: 60) 서버에 통신 요청시 timeout 시간 (sec)\n * @return\n */\nbizMOBCore.Network.requestLogin = function(arg) {\n var timeout = arg._nTimeout ? arg._nTimeout : 60;\n var legacy_message = {\n header: Object.assign({}, {\n result: true,\n error_code: '',\n error_text: '',\n info_text: '',\n message_version: '',\n login_session_id: '',\n trcode: arg._sTrcode\n }, arg._oHeader),\n body: arg._oBody\n };\n var httpHeader = bizMOBCore.Network.httpHeader({\n _sTrcode: 'LOGIN',\n _oHttpHeader: arg._oHttpHeader\n });\n\n var action = 'requestLogin';\n var progressEnable = arg._bProgressEnable === false ? false : true;\n var tr = {\n id:'REQUEST_LOGIN',\n param: {\n // portal에 로그인\n auth_info: {\n user_id: arg._sUserId,\n password: arg._sPassword\n },\n // 확장\n legacy_trcode: arg._sTrcode,\n legacy_message: legacy_message,\n message: {},\n callback: bizMOBCore.CallbackManager.save(arg._fCallback),\n read_timeout : timeout,\n progress : progressEnable,\n header : httpHeader\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 19,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 422,
    "char_count": 1502,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0020",
    "content": "bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * bizMOB Server 전문 통신\n *\n * @param {String} _sUrl 서버 URL\n * @param {String} _sMethod 통신 방식 (get, post)\n * @param {String} _oHeader Http Header\n * @param {String} _oBody Http Body\n * @param {Boolean} _bProgressEnable (default:true) 서버에 통신 요청시 progress 표시 여부( true 또는 false )\n * @param {Number} _nTimeout (default: 60) 서버에 통신 요청시 timeout 시간 (sec)\n * @param {Function} _fCallback 서버와 통신 후 실행될 callback 함수\n *\n * @returns {Object} Response 객체\n * @returns {Boolean} returns.result 결과\n * @returns {Number} returns.response_code 응답 코드 (200 <= .. <= 300)\n * @returns {String} returns.response_data 응답 데이터\n * @returns {Object} returns.error 응답 실패시 에러 객체 (실패시에만 존재)\n * @returns {Number} returns.error.code bizMOB App 응답 실패코드 (ERR000)\n * @returns {String} returns.error.message bizMOB App에서 주는 응답 실패 메시지\n * @returns {Number} returns.error.response_code Server 응답 실패코드 (401, 402, ...) -- 없을 수도 있음\n * @returns {String} returns.error.response_data Server 응답 실패 데이터 -- 없을 수도 있음\n */\nbizMOBCore.Network.requestHttp = function(arg) {\n var action = 'requestHttp';\n\n var url = arg._sUrl;\n var method = arg._sMethod;\n var timeout = arg._nTimeout ? arg._nTimeout : 60;\n var progressEnable = arg._bProgressEnable === false ? false : true; // progress 진행 표시\n var header = Object.assign({}, {\n 'Content-Type': 'application/json'\n }, arg._oHeader);\n var body = arg._oBody;\n\n var tr = {\n id: 'REQUEST_HTTP',\n param: {\n url: url,\n method: method,\n timeout: timeout,\n progress: progressEnable,\n header: header,\n data: body,\n callback: bizMOBCore.CallbackManager.save(arg._fCallback),\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n *\n * 01.클래스 설명 : Event 관리 기능 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : bizMOB Event 관리 기능 클래스\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.EventManager = new Object();\n\nbizMOBCore.EventManager.servicename = 'EventManager';\nbizMOBCore.EventManager.config = {};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 20,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 556,
    "char_count": 1971,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0021",
    "content": "/**\n *\n * 01.클래스 설명 : Event 관리 기능 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : bizMOB Event 관리 기능 클래스\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.EventManager = new Object();\n\nbizMOBCore.EventManager.servicename = 'EventManager';\nbizMOBCore.EventManager.config = {};\n\nbizMOBCore.EventManager.storage = {\n // App init\n 'ready' : [],\n // 페이지 관련\n 'resume' : [],\n 'backbutton' : [],\n 'beforeready' : [],\n // 사이드 뷰 관련\n 'open' : [],\n 'close' : [],\n // 푸시 메시지 관련\n 'push' : [],\n 'networkstatechange' : [],\n // 세션타임아웃\n 'sessiontimeout' : []\n};\n\nbizMOBCore.EventManager.beforeInitEvents =[];\n\nbizMOBCore.EventManager.list = ['ready','resume','backbutton','open','close','networkstatechange','sessiontimeout'];\n\n/**\n * bizMOB Window Load시 bizMOB Event 기능 초기화\n *\n * @param\n *\n * @return\n */\nbizMOBCore.EventManager.init = function() {\n\n var action = 'init';\n\n bizMOBCore.Module.logger(this.servicename, action ,'L', 'EventManager initializing start.');\n\n for (var evtname in this.storage) {\n // bizMOBCore.Module.logger(this.servicename, action ,\"L\", evtname + \" event handler.\");\n // `&& this.storage[evtname].length > 0` 조건 제거: onReady가 App에서 너무 빨리 호출되는 경우 이벤트 등록이 안됨.\n if (Object.hasOwnProperty.call(this.storage, evtname)) {\n\n bizMOBCore.Module.logger(this.servicename, action ,'L', evtname + ' event handler registed.');\n document.addEventListener('bizMOB.on' + evtname, function(event) {\n var eventName = event.type.replace('bizMOB.on', '');\n var eventList = bizMOBCore.EventManager.storage[eventName];\n\n eventList.forEach(function(callback) {\n if (callback instanceof Function) {\n callback(event);\n }\n else {\n try {\n eval(callback);\n } catch (error) {\n bizMOBCore.Module.logger(this.servicename, action ,'W', callback + ' is undefined. ');\n }\n }\n });\n });\n\n }else{\n bizMOBCore.Module.logger(this.servicename, action ,'L', evtname + ' event handler does not exist.');\n }\n }\n\n var recievedEventslength = bizMOBCore.EventManager.beforeInitEvents.length;\n if(recievedEventslength > 0 ){\n // console.log(\"run event before init\");",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 21,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 559,
    "char_count": 2030,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0022",
    "content": "}else{\n bizMOBCore.Module.logger(this.servicename, action ,'L', evtname + ' event handler does not exist.');\n }\n }\n\n var recievedEventslength = bizMOBCore.EventManager.beforeInitEvents.length;\n if(recievedEventslength > 0 ){\n // console.log(\"run event before init\");\n\n for(var i=0; i < recievedEventslength; i++ ){\n bizMOBCore.EventManager.raiseevent(bizMOBCore.EventManager.beforeInitEvents[i]['oRequired'], bizMOBCore.EventManager.beforeInitEvents[i]['oOptions']);\n }\n }\n if (bizMOBCore.DeviceManager.isAndroid()) {\n // bizMOB App에 backbutton에 대한 event 추가 요청\n bizMOBCore.EventManager.requester({ 'eventname' : 'backbutton' });\n }\n\n bizMOBCore.Module.logger(this.servicename, action ,'L', 'EventManager initialized.');\n};\n\n/**\n * bizMOB App에서 관장하는 Event 등록 요청 기능\n *\n * @param Object oRequired 요청 이벤트 Data객체\n * @param Object oOptions 요청 이벤트 등록 요청시 전달할 Data객체\n *\n * @return\n */\nbizMOBCore.EventManager.requester = function(oRequired, oOptions) {\n\n var action = 'requester';\n\n switch(oRequired.eventname)\n {\n case 'backbutton' :\n\n var tr = {\n id:'ADD_EVENT_BACKBUTTON',\n param:{}\n };\n\n var params ={\n useBackEvent : true,\n };\n\n tr.param = params;\n\n // bizMOB App gateway에 요청\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n bizMOBCore.Module.logger(this.servicename, action ,'L', 'EventManager request add event.');\n\n break;\n }\n\n};\n\n/**\n * bizMOB App에서 Event 발생시 Web으로 전달되는 기능\n *\n * @param Object oRequired 발생한 이벤트 Data객체\n * @param Object oOptions 이벤트에 전달될 메세지 Data객체\n *\n * @return\n */\nbizMOBCore.EventManager.responser = function(oRequired, oOptions) {\n // 네이티브에게 응답을 받기위한 용도\n // 네이티브에서 로직처리 완료 후 responser를 호출\n\n var action = 'responser';\n\n bizMOBCore.Module.logger(this.servicename, action ,'L', 'EventManager recieved event. - ' + oRequired.eventname + ', ' + JSON.stringify(oOptions));",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 22,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 498,
    "char_count": 1799,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0023",
    "content": "var action = 'responser';\n\n bizMOBCore.Module.logger(this.servicename, action ,'L', 'EventManager recieved event. - ' + oRequired.eventname + ', ' + JSON.stringify(oOptions));\n\n switch(oRequired.eventname)\n {\n // 네이티브에서 준비되면 onReady\n case 'onReady' :\n if(!bizMOBCore.readystatus){\n // 웹 레디 준비(Module.init에서 device property랑 이벤트 등록해줌)\n bizMOBCore.Module.init(oRequired, oOptions);\n bizMOBCore.readystatus = true;\n // beforeready 호출(beforeready: 페이지가 로딩 전에 수행되어야하는 로직들)\n bizMOBCore.EventManager.raiseevent({eventname : 'onbeforeready'}, oOptions);\n // onReady불러줌 onReady에 page.init\n if(bizMOBCore.EventManager.beforeInitEvents.length == 0 || bizMOBCore.EventManager.beforeInitEvents[0]['oOptions']['message']['status'] == 'receive'){\n bizMOBCore.EventManager.raiseevent(oRequired, oOptions);\n }else{\n bizMOBCore.EventManager.raiseevent(oRequired, {'message' : { startBy : bizMOBCore.EventManager.beforeInitEvents[0]['oRequired']['eventname'].replace(/on/,'').toLowerCase()}});\n }\n }\n break;\n // 일반적인 이벤트\n default :\n if(bizMOBCore.readystatus){\n bizMOBCore.EventManager.raiseevent(oRequired, oOptions);\n }else{\n // console.log(\"event rev before init\" + JSON.stringify(oRequired));\n bizMOBCore.EventManager.beforeInitEvents.push({'oRequired':oRequired, 'oOptions' :oOptions });\n }\n break;\n }\n\n};\n\n/**\n * 등록된 이벤트를 발생 시키는 기능\n *\n * @param Object oRequired 발생한 이벤트 Data객체\n * @param Object oOptions 이벤트에 전달될 메세지 Data객체\n *\n * @return\n */\nbizMOBCore.EventManager.raiseevent = function(oRequired, oOptions) {\n // 이벤트 발생\n var action = 'raiseevent';\n\n bizMOBCore.Module.logger(this.servicename, action ,'L', 'EventManager raise event. - ' + oRequired.eventname.toLowerCase() + ', ' + JSON.stringify(oOptions.message));\n\n // 자바스크립트 custom이벤트 발생\n var evt = document.createEvent('Event');\n evt.initEvent('bizMOB.'+oRequired.eventname.toLowerCase(), false, true );\n // 이전페이지에서 온 message를 data에 넣어줌\n evt.data = oOptions.message;\n\n try{\n document.dispatchEvent(evt);\n }catch(e){\n bizMOBCore.Module.logger(this.servicename, action ,'E', e);\n }\n\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 23,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 563,
    "char_count": 2026,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0024",
    "content": "try{\n document.dispatchEvent(evt);\n }catch(e){\n bizMOBCore.Module.logger(this.servicename, action ,'E', e);\n }\n\n};\n\n// 이벤트 등록 (set)\nbizMOBCore.EventManager.set = function() {\n var sEvent = arguments[0]._sEvent;\n var fCallback = arguments[0]._fCallback;\n\n if (bizMOBCore.EventManager.storage[sEvent]) {\n // bizMOB App에서 이미 onReady를 발생 시킨 후에 ready를 등록시 바로 실행\n if (sEvent === 'ready' && bizMOBCore.readystatus) {\n bizMOBCore.Module.logger(this.servicename, 'setEvent', 'L', 'Event execute. - ' + sEvent);\n fCallback();\n }\n // 그 외에는 등록\n else {\n bizMOBCore.EventManager.storage[sEvent] = [ fCallback ];\n bizMOBCore.Module.logger(this.servicename, 'setEvent', 'L', '\\'' + sEvent + '\\' event set.');\n }\n }\n else {\n bizMOBCore.Module.logger(this.servicename, 'setEvent','E', 'Event set failed. Cannot find \\'' + sEvent + '\\' eventname.');\n }\n};\n\n// 이벤트 삭제\nbizMOBCore.EventManager.clear = function() {\n var sEvent = arguments[0]._sEvent;\n\n if (bizMOBCore.EventManager.storage[sEvent]) {\n bizMOBCore.EventManager.storage[sEvent] = [];\n bizMOBCore.Module.logger(this.servicename, 'clearEvent', 'L', '\\'' + sEvent + '\\' event clear.');\n }\n else {\n bizMOBCore.Module.logger(this.servicename, 'setEvent','E', 'Event clear failed. Cannot find \\'' + sEvent + '\\' eventname.');\n }\n};\n\n/**\n *\n * 01.클래스 설명 : 단말기 정보 관리 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : 단말기 정보 관리\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.DeviceManager = new Object();\n\nbizMOBCore.DeviceManager.servicename = 'DeviceManager';\nbizMOBCore.DeviceManager.config = {};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 24,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 426,
    "char_count": 1534,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0025",
    "content": "/**\n *\n * 01.클래스 설명 : 단말기 정보 관리 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : 단말기 정보 관리\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.DeviceManager = new Object();\n\nbizMOBCore.DeviceManager.servicename = 'DeviceManager';\nbizMOBCore.DeviceManager.config = {};\n\n/**\n * bizMOB Window Load시 bizMOB Device Info 초기화\n *\n * @param\n *\n * @return\n */\nbizMOBCore.DeviceManager.init = function(){\n // Device Info관련\n var appMajorVersion = bizMOBCore.DeviceManager.getInfo({ _sKey: 'app_major_version' });\n var appMinorVersion = bizMOBCore.DeviceManager.getInfo({ _sKey: 'app_minor_version' });\n var appBuildVersion = bizMOBCore.DeviceManager.getInfo({ _sKey: 'app_build_version' });\n var contentMinorVersion = bizMOBCore.DeviceManager.getInfo({ _sKey: 'content_major_version' });\n var contentBuildVersion = bizMOBCore.DeviceManager.getInfo({ _sKey: 'content_minor_version' });\n var appVersion = appMajorVersion + '.' + appMinorVersion + '.' + appBuildVersion + '_' + contentMinorVersion + '.' + contentBuildVersion;\n\n bizMOBCore.DeviceManager.setInfo({\n _sKey: 'app_version',\n _sValue: appVersion\n });\n\n bizMOBCore.Module.logger(this.servicename, 'init', 'D', 'Device Info initialized - ' + JSON.stringify(bizMOBCore.DeviceManager.getInfo()));\n};\n\n/**\n * 단말기 정보조회\n *\n * @param {String} _sKey 디바이스 정보 키 값.\n *\n * @return Object 단말기 정보\n */\nbizMOBCore.DeviceManager.getInfo = function() {\n // Core에서 컨테이너에게 정보를 요청하지 않고 Xross에서 저장되어 있는 값을 return함.\n return arguments[0] && arguments[0]._sKey\n ? window.bizMOB.Device.Info[arguments[0]._sKey]\n : window.bizMOB.Device.Info;\n};\n\n/**\n * 단말기 정보조회\n *\n * @param {String} _sKey 디바이스 정보 key 값.\n * @param {String} _sValue 디바이스 정보 value 값.\n */\nbizMOBCore.DeviceManager.setInfo = function() {\n window.bizMOB.Device.Info[arguments[0]._sKey] = arguments[0]._sValue;\n};\n\n/**\n * App 판단 여부\n */\nbizMOBCore.DeviceManager.isApp = function() {\n return !!window.BMCManager || (!!window.webkit && !!window.webkit.messageHandlers && !!window.webkit.messageHandlers.BMCManager);\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 25,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 555,
    "char_count": 1994,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0026",
    "content": "/**\n * App 판단 여부\n */\nbizMOBCore.DeviceManager.isApp = function() {\n return !!window.BMCManager || (!!window.webkit && !!window.webkit.messageHandlers && !!window.webkit.messageHandlers.BMCManager);\n};\n\n/**\n * Web 판단 여부\n */\nbizMOBCore.DeviceManager.isWeb = function() {\n return !bizMOBCore.DeviceManager.isApp();\n};\n\n/**\n * Mobile 여부\n */\nbizMOBCore.DeviceManager.isMobile = function() {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return UA && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(UA);\n};\n\n/**\n * PC 여부\n */\nbizMOBCore.DeviceManager.isPC = function() {\n return !bizMOBCore.DeviceManager.isMobile();\n};\n\n/**\n * Android 여부\n */\nbizMOBCore.DeviceManager.isAndroid = function() {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return /android/i.test(UA);\n};\n\n/**\n * IOS 여부\n */\nbizMOBCore.DeviceManager.isIOS = function() {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return /iPad|iPhone|iPod/.test(UA) && !window.MSStream;\n};\n\n/**\n * Tablet 여부\n */\nbizMOBCore.DeviceManager.isTablet = function() {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(UA.toLowerCase());\n};\n\n/**\n * Phone 여부\n */\nbizMOBCore.DeviceManager.isPhone = function() {\n return bizMOBCore.DeviceManager.isMobile() && !bizMOBCore.DeviceManager.isTablet();\n};\n\n/**\n *\n * 01.클래스 설명 : bizMOB App API 실행 기능 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : bizMOB App API 실행 기능\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.ExtendsManager = new Object();\n\nbizMOBCore.ExtendsManager.servicename = 'Extends';\n\nbizMOBCore.ExtendsManager.executer = function(){\n\n var action = 'executer';\n\n for (var prop in arguments[0]._oParam) {\n if (Object.hasOwnProperty.call(arguments[0]._oParam, prop)) {\n if (typeof arguments[0]._oParam[prop] === 'function') {\n arguments[0]._oParam[prop] = bizMOBCore.CallbackManager.save(arguments[0]._oParam[prop], 'custom');\n }\n }\n }",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 26,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 560,
    "char_count": 2062,
    "created_at": "2025-08-01T16:17:10.826Z"
  },
  {
    "id": "5d01cb46_0027",
    "content": "for (var prop in arguments[0]._oParam) {\n if (Object.hasOwnProperty.call(arguments[0]._oParam, prop)) {\n if (typeof arguments[0]._oParam[prop] === 'function') {\n arguments[0]._oParam[prop] = bizMOBCore.CallbackManager.save(arguments[0]._oParam[prop], 'custom');\n }\n }\n }\n\n bizMOBCore.Module.logger(this.servicename, action, 'D', ' ExtendsManager executer : ' + arguments[0]._sID + ' -' + JSON.stringify(arguments[0]._oParam));\n\n var tr = {\n id: arguments[0]._sID,\n param:arguments[0]._oParam\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n *\n * 01.클래스 설명 : 단말기 주소록 기능 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : 단말기 주소록 관리 기능\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.Contacts = new Object();\n\nbizMOBCore.Contacts.servicename = 'Contacts';\nbizMOBCore.Contacts.config = {};\n\n/**\n * 전화번호부 검색\n *\n * @param String _sSearchType (Default : \"\", 전체조회) 주소록 검색 대상 필드(name 또는 phone)\n * @param String _sSearchText (Default : \"\") 주소록 검색어\n * @param Function _fCallback 주소록 검색 결과를 받아 처리할 callback함수\n *\n * @return\n */\nbizMOBCore.Contacts.get = function(options) {\n\n var action = 'get';\n\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr =\n {\n id:'GET_CONTACT',\n param:{\n search_type : arguments[0]._sSearchType || '',\n search_text : arguments[0]._sSearchText || '',\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n *\n * 01.클래스 설명 : File 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : File 컨트롤 클래스\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.File = new Object();\n\nbizMOBCore.File.servicename = 'File';\nbizMOBCore.File.config = {};\n\n/**\n * 파일 열기\n *\n * @param String _sSourcePath 열어볼 파일 경로. 기본 설치App으로 연결.\n * @param Function _fCallback 파일을 열고 난 후 호출될 callback함수.\n *\n * @return\n */\nbizMOBCore.File.open = function()\n{\n var action = 'open';\n\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sSourcePath);\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 27,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 566,
    "char_count": 2007,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0028",
    "content": "var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sSourcePath);\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr =\n {\n id:'OPEN_FILE',\n param:{\n target_path : splitSourcePath.path,\n target_path_type : splitSourcePath.type,\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 파일 압축\n *\n * @param String _sSourcePath 소스 File Path.\n * @param String _sTargetPath 결과 File Path.\n * @param Function _fCallback 압축 후 호출될 callback함수.\n *\n * @return\n */\nbizMOBCore.File.zip= function()\n{\n var action = 'zip';\n\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sSourcePath);\n var splitTargetPath = bizMOBCore.Module.pathParser(arguments[0]._sTargetPath);\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr =\n {\n\n id:'MAKE_ZIPFILE',\n param:{\n source_path: splitSourcePath.path,\n source_path_type: splitSourcePath.type,\n target_path: splitTargetPath.path,\n target_path_type: splitTargetPath.type,\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * 파일 압축해제\n *\n * @param String _sSourcePath 소스 File Path.\n * @param String _sDirectory 압축 해제할 Directory Path.\n * @param Function _fCallback 압축 후 호출될 callback함수.\n *\n * @return\n */\nbizMOBCore.File.unzip= function()\n{\n var action = 'unzip';\n\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sSourcePath);\n var splitTargetPath = bizMOBCore.Module.pathParser(arguments[0]._sDirectory);\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr =\n {\n\n id:'EXTRACT_ZIPFILE',\n param:{\n source_path: splitSourcePath.path,\n source_path_type: splitSourcePath.type,\n target_directory: splitTargetPath.path,\n target_directory_type: splitTargetPath.type,\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 28,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 505,
    "char_count": 1893,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0029",
    "content": "bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * 파일 이동\n *\n * @param String _sSourcePath 소스 File Path.\n * @param String _sTargetPath 이동될 File Path.\n * @param Function _fCallback 이동 후 호출될 callback함수.\n *\n * @return\n */\nbizMOBCore.File.move = function()\n{\n var action = 'move';\n\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sSourcePath);\n var splitTargetPath = bizMOBCore.Module.pathParser(arguments[0]._sTargetPath);\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr =\n {\n\n id:'MOVE_FILE',\n param:{\n source_path: splitSourcePath.path,\n source_path_type: splitSourcePath.type,\n target_path: splitTargetPath.path,\n target_path_type: splitTargetPath.type,\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * 파일 복사\n *\n * @param String _sSourcePath 소스 File Path.\n * @param String _sTargetPath 복사될 File Path.\n * @param Function _fCallback 복사 후 호출될 callback함수.\n *\n * @return\n */\nbizMOBCore.File.copy = function() {\n\n var action = 'copy';\n\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sSourcePath);\n var splitTargetPath = bizMOBCore.Module.pathParser(arguments[0]._sTargetPath);\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n\n 'id': 'COPY_FILE',\n 'param': {\n source_path: splitSourcePath.path,\n source_path_type: splitSourcePath.type,\n target_path: splitTargetPath.path,\n target_path_type: splitTargetPath.type,\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * 파일 삭제\n *\n * @param Array _aSourcePath 삭제할 File Path 목록.\n * @param Function _fCallback 삭제 후 호출될 callback함수.\n *\n * @return\n */\nbizMOBCore.File.remove = function() {\n\n var action = 'remove';\n\n var targetfiles = [];\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n for(var i=0;i<arguments[0]._aSourcePath.length;i++){\n\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._aSourcePath[i]);",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 29,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 540,
    "char_count": 2009,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0030",
    "content": "var action = 'remove';\n\n var targetfiles = [];\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n for(var i=0;i<arguments[0]._aSourcePath.length;i++){\n\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._aSourcePath[i]);\n\n var file = {\n 'source_path': splitSourcePath.path,\n 'source_path_type': splitSourcePath.type,\n };\n\n targetfiles[i] = file;\n }\n\n var tr = {\n\n 'id': 'REMOVE_FILES',\n 'param': {\n list: targetfiles,\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 디렉토리 정보 읽기\n *\n * @param Array _aSourcePath 삭제할 File Path 목록.\n * @param Function _fCallback 삭제 후 호출될 callback함수.\n *\n * @return\n */\nbizMOBCore.File.directory = function()\n{\n var action = 'directory';\n\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sDirectory);\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr =\n {\n\n id:'GET_DIRECTORY',\n param:{\n source_directory: splitSourcePath.path,\n source_directory_type: splitSourcePath.type,\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 파일 존재 여부 확인\n *\n * @param String _sSourcePath 확인할 File Path 목록.\n * @param Function _fCallback 확인 후 호출될 callback함수.\n *\n * @return\n */\nbizMOBCore.File.exist = function() {\n\n var action = 'exist';\n\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sSourcePath);\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr =\n {\n\n id:'EXISTS_FILE',\n param:{\n source_path: splitSourcePath.path,\n source_path_type: splitSourcePath.type,\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * 파일 업로드\n *\n * @param Array _aFileList 업로드할 File Path 목록.\n * @param Function _fCallback 결과를 받을 callback 함수.\n *\n * @return\n */\nbizMOBCore.File.upload = function() {\n\n var action = 'upload';\n\n var file_list = arguments[0]._aFileList.map(function(row, index) {\n var splitSourcePath = bizMOBCore.Module.pathParser(row._sSourcePath);",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 30,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 548,
    "char_count": 2030,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0031",
    "content": "var action = 'upload';\n\n var file_list = arguments[0]._aFileList.map(function(row, index) {\n var splitSourcePath = bizMOBCore.Module.pathParser(row._sSourcePath);\n\n return {\n source_path : splitSourcePath.path,\n source_path_type : splitSourcePath.type,\n file_name : row._sFileName\n };\n });\n\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr =\n {\n id:'UPLOAD_FILE',\n param:{\n list : file_list,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * 파일 다운로드\n *\n * @param Array _aFileList 다운로드할 URL 주소 목록.\n * @param String _sMode 파일 다운로드 모드. (background 또는 foreground ).\n * @param String _sProgressBar 다운로드할 때 프로그래스바 설정 값.( off , each, full )\n * @param Function _fCallback 결과를 받을 callback 함수.\n *\n * @return\n */\nbizMOBCore.File.download = function() {\n\n var action = 'download';\n var progressbar = {};\n\n switch(arguments[0]._sProgressBar)\n {\n // provider: progressbar를 어디서 그릴지 결정\n // bizMOB App-> bizMOB App에서 그림\n case 'full' :\n progressbar.provider = 'bizMOB App';\n progressbar.type = 'full_list';\n break;\n case 'each' :\n progressbar.provider = 'bizMOB App';\n progressbar.type = 'each_list';\n break;\n case 'off' :\n progressbar.provider = 'web';\n progressbar.type = '';\n break;\n default :\n progressbar.provider = 'bizMOB App';\n progressbar.type = 'default';\n // default: full_list\n break;\n }\n\n arguments[0]._oProgressBar = progressbar;\n\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback, 'listener');\n var file_list = arguments[0]._aFileList;\n var list_len = file_list.length;\n\n for(var i=0;i< list_len; i++){\n var splitTargetPath = bizMOBCore.Module.pathParser(file_list[i]._sDirectory);\n file_list[i].target_path = splitTargetPath.path + file_list[i]._sFileName,\n file_list[i].target_path_type = splitTargetPath.type,\n file_list[i].overwrite = file_list[i]._bOverwrite,\n file_list[i].uri = file_list[i]._sURI,\n file_list[i].file_id = i;\n }\n\n var tr = {",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 31,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 529,
    "char_count": 1951,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0032",
    "content": "var tr = {\n\n id:'DOWNLOAD_FILE',\n param:{\n method:arguments[0]._sMode,\n uri_list:file_list,\n progress : arguments[0]._oProgressBar,\n callback:callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n\n};\n\n/**\n * 파일 정보 가져오기\n *\n * @param Array _aFileList 정보를 가져올 File Path 목록.\n * @param Function _fCallback 결과를 받을 callback 함수.\n *\n * @return\n */\nbizMOBCore.File.getInfo = function() {\n var action = 'getInfo';\n\n var serviceName = this.servicename;\n var fileList = arguments[0]._aFileList.map(function(row, index) {\n var splitSourcePath = bizMOBCore.Module.pathParser(row._sSourcePath);\n\n return {\n index : index,\n source_path : splitSourcePath.path,\n source_path_type : splitSourcePath.type\n };\n });\n var userCallback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n // JSON은 순서 보장이 안되니까 순서 맞춰서 usercallback대신 callback을 만들고\n // bizMOB App에 callback보내고 callback안에서 usercallback부르도록\n var callback = bizMOBCore.CallbackManager.save(function(res) {\n bizMOBCore.Module.logger(serviceName, action ,'D', res);\n\n if(res.result) {\n var nonIndexFileList = [];\n\n res.list.forEach(function(row) {\n var index = row.index;\n\n nonIndexFileList[index] = row;\n delete nonIndexFileList[index].index;\n });\n\n res.list = nonIndexFileList;\n }\n\n // script에서 호출하는 CallbackManager responser\n bizMOBCore.CallbackManager.responser({\n 'callback' : userCallback\n }, {\n 'message' : res\n });\n });\n\n var tr = {\n id : 'GET_FILE_INFO',\n param : {\n file_path : fileList,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 32,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 423,
    "char_count": 1554,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0033",
    "content": "var tr = {\n id : 'GET_FILE_INFO',\n param : {\n file_path : fileList,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 이미지 파일 리사이즈\n *\n * @param Array _aFileList 이미지 파일 목록.\n * @param Boolean _bIsCopy (Default : false) 원본 파일 유지 여부. (true 또는 false)\n * @param String _sTargetDirectory _bIsCopy가 true일 경우 복사본이 저장될 디렉토리 경로.\n * @param Number _nWidth 파일의 가로 크기를 설정.\n * @param Number _nHeight 파일의 세로 크기를 설정.\n * @param Number _nCompressRate Number X (Default : 1.0) 파일의 압축률 값( 0.0부터 1.0까지 값 지정가능 )\n * @param Number _nFileSize 리사이즈 된 파일 용량의 최대값.( byte단위 )\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.File.resizeImage = function() {\n var action = 'resizeImage';\n\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var fileList = arguments[0]._aFileList.map(function(row) {\n var splitSourcePath = bizMOBCore.Module.pathParser(row._sSourcePath);\n\n return {\n source_path : splitSourcePath.path,\n source_path_type : splitSourcePath.type\n };\n });\n var splitTargetDir = bizMOBCore.Module.pathParser(arguments[0]._sTargetDirectory);\n // resizeImage가 가로, 세로를 줄이는게 아니라 용량을 줄이는 것\n var compressRate = isNaN(Number(arguments[0]._nCompressRate)) ? 1.0 : arguments[0]._nCompressRate;\n // 원본 보존할지 여부\n var copy = arguments[0]._bIsCopy === false ? false : true;\n\n var tr = {\n id : 'RESIZE_IMAGE',\n param : {\n image_paths : fileList,\n callback : callback,\n compress_rate : compressRate,\n copy_flag : copy,\n width : arguments[0]._nWidth,\n height : arguments[0]._nHeight,\n file_size : arguments[0]._nFileSize,\n target_path_type : splitTargetDir.type,\n target_path : splitTargetDir.path\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 33,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 488,
    "char_count": 1736,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0034",
    "content": "bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 이미지 파일 회전\n *\n * @param String _sSourcePath 이미지 File Path.\n * @param String _sTargetPath 회전된 이미지가 저장될 Path.\n * @param Number _nOrientation 회전 시킬 각도(EXIF_Orientation)값.(1, 2, 3, 4, 5, 6, 7, 8 )\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.File.rotateImage = function() {\n var action = 'rotateImage';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var splitSourcePath = bizMOBCore.Module.pathParser(arguments[0]._sSourcePath);\n var splitTargetPath = bizMOBCore.Module.pathParser(arguments[0]._sTargetPath);\n var orientation = (arguments[0]._nOrientation).toString();\n\n var tr = {\n id : 'ROTATE_IMAGE',\n param : {\n orientation : orientation,\n source_path_type : splitSourcePath.type,\n source_path : splitSourcePath.path,\n target_path_type : splitTargetPath.type,\n target_path : splitTargetPath.path,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n *\n * 01.클래스 설명 : Push 기능 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : bizPush Server Open API연동 본 기능\n * 04.관련 API/화면/서비스 : bizMOBCore.Module.checkparam,bizMOBCore.Push.getAlarm,bizMOBCore.Push.getMessageList,bizMOBCore.Push.getPushKey,bizMOBCore.Push.getUnreadCount,bizMOBCore.Push.readMessage,bizMOBCore.Push.registerToServer,bizMOBCore.Push.sendMessage,bizMOBCore.Push.setAlarm,bizMOBCore.Push.setBadgeCount\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.PushManager = new Object();\n\nbizMOBCore.PushManager.servicename = 'PushManager';\nbizMOBCore.PushManager.config = {\n _oPushPath: {\n REGISTER: '/v150/push'\n },\n _sPushUrl: '', // Push 서버 URL\n};\n\nbizMOBCore.PushManager.userCallback = {};\n\n/**\n * 푸시 기본 저장 정보 초기화\n *\n * @param\n *\n * @return\n */\nbizMOBCore.PushManager.reset = function() {\n bizMOBCore.Properties.remove({\n '_sKey' : 'STORED_PUSHKEY'\n });\n bizMOBCore.Properties.remove({\n '_sKey' : 'STORED_PUSH_USERID'\n });\n bizMOBCore.Properties.remove({\n '_sKey' : 'IS_REGISTRATION'\n });\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 34,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 555,
    "char_count": 2031,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0035",
    "content": "/**\n * 푸시 정보 등록 여부 체크\n *\n * @param\n *\n * @return Boolean isRegistration 등록 여부(true 또는 false )\n */\nbizMOBCore.PushManager.isRegistration = function() {\n // 앱 최초 실행 시, push서버에 register되었는지 확인(Properties)\n var isRegistration = bizMOBCore.Properties.get({\n '_sKey' : 'IS_REGISTRATION'\n }) ? true : false;\n\n return isRegistration;\n};\n\n/**\n * 푸시 키 일치 여부 확인\n *\n * @param\n *\n * @return Boolean result 일치 여부(true 또는 false )\n */\nbizMOBCore.PushManager.checkValidPushKey = function() {\n // 네이티브 device에 등록된 push_key랑 property에 있는 push_key일치 여부\n var deviceInfoPushKey = bizMOBCore.DeviceManager.getInfo({\n '_sKey' : 'push_key'\n });\n var storedPushKey = bizMOBCore.Properties.get({\n '_sKey' : 'STORED_PUSHKEY'\n });\n var result = false;\n\n // deviceInfoPushKey = bizMOBCore.PushManager.config._sPushUrl + \":\" + deviceInfoPushKey;\n\n if(bizMOBCore.DeviceManager.isAndroid()) {\n if(typeof deviceInfoPushKey == 'string') {\n if(deviceInfoPushKey.trim().length > 0) {\n if(deviceInfoPushKey == storedPushKey) result = true;\n }\n }\n } else {\n if(deviceInfoPushKey == storedPushKey) result = true;\n }\n\n return result;\n};\n\n/**\n * 푸시 사용 유저 정보 조회\n *\n * @param String userId 비교할 유저ID\n *\n *\n * @return Boolean result 일치 여부(true 또는 false )\n */\nbizMOBCore.PushManager.checkValidPushUserId = function(userId) {\n // 1인 1디바이스가 아니라 한 어플리케이션에 로그아웃 후 다른 사용자로 로그인 시 userid가 등록되어 있는지 확인\n var storedPushUserId = bizMOBCore.Properties.get({\n '_sKey' : 'STORED_PUSH_USERID'\n });\n var result = false;\n\n if(storedPushUserId != undefined) {\n if(storedPushUserId.toString().trim().length > 0) {\n if(storedPushUserId == userId) {\n result = true;\n }\n }\n }\n\n return result;\n};\n\n/**\n * 푸시키 저장\n *\n * @param String pushKey 저장할 pushKey\n *\n * @return\n */\nbizMOBCore.PushManager.setStoredPushKey = function(pushKey) {\n // bizMOB App에 push_key setting용도\n var storedPushKey = bizMOBCore.Properties.get({\n '_sKey' : 'STORED_PUSHKEY'\n });\n\n // pushKey = bizMOBCore.PushManager.config._sPushUrl + \":\" + pushKey;\n\n if(storedPushKey != pushKey) {\n bizMOBCore.Properties.set({\n '_sKey' : 'STORED_PUSHKEY',\n '_vValue' : pushKey\n });\n }\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 35,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 578,
    "char_count": 2073,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0036",
    "content": "// pushKey = bizMOBCore.PushManager.config._sPushUrl + \":\" + pushKey;\n\n if(storedPushKey != pushKey) {\n bizMOBCore.Properties.set({\n '_sKey' : 'STORED_PUSHKEY',\n '_vValue' : pushKey\n });\n }\n};\n\n/**\n * 푸시 사용 유저 정보 저장\n *\n * @param String userId 저장할 유저ID\n *\n * @return\n */\nbizMOBCore.PushManager.setStoredPushUserId = function(userId) {\n // bizMOB App에 pushUserID 저장 용도\n var storedPushUserId = bizMOBCore.Properties.get({\n '_sKey' : 'STORED_PUSH_USERID'\n });\n\n if(storedPushUserId != userId) {\n bizMOBCore.Properties.set({\n '_sKey' : 'STORED_PUSH_USERID',\n '_vValue' : userId\n });\n }\n};\n\n/**\n * 푸시키 정보 조회\n *\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n * @param Boolean _bProgressEnable (default:true) 푸시 서버와 통신 중일때 화면에 progress 를 표시할지에 대한 여부( true 또는 false )\n *\n * @return\n */\nbizMOBCore.PushManager.getPushKey = function() {\n // bizMOB push server로 부터 push key get\n var action = 'getPushKey';\n var callback = bizMOBCore.CallbackManager.save(this.resGetPushKey);\n var userCallback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var progressEnable = arguments[0]._bProgressEnable === false ? false : true;\n\n this.userCallback[action] = userCallback;\n\n var tr = {\n id : 'GET_PUSHKEY',\n param : {\n callback : callback,\n read_timeout : 10*1000,\n progress : progressEnable\n }\n };\n\n if(!this.checkValidPushKey()) {\n bizMOBCore.Properties.remove({\n '_sKey' : 'IS_REGISTRATION'\n });\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n } else {\n var returnValue = {\n 'result' : true,\n 'resultCode' : '0000',\n 'resultMessage' : bizMOBCore.DeviceManager.getInfo({\n '_sKey' : 'push_key'\n })\n };\n\n this.resGetPushKey(returnValue);\n }\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 36,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 452,
    "char_count": 1652,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0037",
    "content": "this.resGetPushKey(returnValue);\n }\n};\n\n/**\n * 푸시키 정보 결과처리 Callback 함수\n *\n * @param Object res bizMOB App에서 전달받은 푸시키 정보 Data Object.\n * *\n * @return\n */\nbizMOBCore.PushManager.resGetPushKey = function(res) {\n // push key get 후 response callback\n if(res.result) {\n bizMOBCore.PushManager.setStoredPushKey(res.resultMessage);\n bizMOBCore.DeviceManager.setInfo({ _sKey: 'push_key', _sValue: res.resultMessage });\n } else {\n bizMOBCore.Module.logger(this.servicename, 'getPushKey' ,'D', res.resultMessage);\n }\n\n bizMOBCore.CallbackManager.responser({\n 'callback' : bizMOBCore.PushManager.userCallback['getPushKey']\n }, {\n 'message' : res\n });\n};\n\n/**\n * 푸시서버에 사용자 정보 등록\n *\n * @param String _sServerType 푸시키를 등록할 서버 타입.( bizpush 또는 push )\n * @param String_sUserId 푸시키를 등록할 사용자 아이디.\n * @param String _sAppName 푸시키를 등록할 앱 이름.\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n * @param Boolean _bProgressEnable (default:true) 푸시 서버와 통신 중일때 화면에 progress 를 표시할지에 대한 여부( true 또는 false )\n *\n * @return\n */\nbizMOBCore.PushManager.registerToServer = function(arg) {\n // 서버에 register용도\n if (!bizMOBCore.DeviceManager.isApp()) {\n bizMOBCore.Module.logger(this.servicename, action, 'D', 'This function doesn\\'t support in browser');\n arg._fCallback();\n return true;\n }\n\n var action = 'registerToServer';\n var callback = {};\n var userCallback = bizMOBCore.CallbackManager.save(arg._fCallback);\n var userId = arg._sUserId;\n var progressEnable = arg._bProgressEnable === false ? false : true;\n var pushKey = bizMOBCore.DeviceManager.getInfo({\n '_sKey' : 'push_key'\n });\n\n this.userCallback[action] = userCallback;\n\n callback = function(res) {\n bizMOBCore.PushManager.resRegistration(res, userId, pushKey);\n };\n\n var tr = {\n id : 'PUSH_REGISTRATION',\n param : {\n type : arg._sServerType,\n push_key : pushKey,\n user_id : userId,\n app_name : arg._sAppName,\n callback : bizMOBCore.CallbackManager.save(callback),\n read_timeout : 10*1000,\n progress : progressEnable\n }\n };",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 37,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 539,
    "char_count": 1952,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0038",
    "content": "var tr = {\n id : 'PUSH_REGISTRATION',\n param : {\n type : arg._sServerType,\n push_key : pushKey,\n user_id : userId,\n app_name : arg._sAppName,\n callback : bizMOBCore.CallbackManager.save(callback),\n read_timeout : 10*1000,\n progress : progressEnable\n }\n };\n\n if(this.checkValidPushUserId(userId) && this.checkValidPushKey()){\n var resultValue = {\n 'result' : true,\n 'resultCode' : '0000',\n 'resultMessage' : '성공',\n 'body' : null\n };\n\n this.resRegistration(resultValue, userId, pushKey);\n }else{\n bizMOBCore.PushManager.reset();\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n }\n};\n\n/**\n * 푸시서버에 사용자 정보 등록 결과 처리 함\n *\n * @param Object res bizMOB App에서 전달받은 등록 처리 결과 정보 Data\n * @param String_sUserId 등록한 사용자 아이디.\n *\n * @return\n */\nbizMOBCore.PushManager.resRegistration = function(res, userId, pushKey) {\n // 서버 register 후 response callback\n if(res.result) {\n bizMOBCore.Properties.set({\n '_sKey' : 'IS_REGISTRATION',\n '_vValue' : true\n });\n\n bizMOBCore.PushManager.setStoredPushUserId(userId);\n bizMOBCore.PushManager.setStoredPushKey(pushKey);\n } else {\n bizMOBCore.Module.logger(this.servicename, 'registerToServer' ,'D', res.resultMessage);\n }\n\n bizMOBCore.CallbackManager.responser({\n 'callback' : bizMOBCore.PushManager.userCallback['registerToServer']\n }, {\n 'message' : res\n });\n};\n\n/**\n * 푸시 알람 수신여부 설정\n *\n * @param String _sUserId 푸시 알림 설정을 등록할 사용자 이이디.\n * @param Boolean _bEnabled (Default : true) 알람 수신 여부 설정 ( true 또는 false )\n * @param Boolean _bProgressEnable (Default:true) 푸시 알람 설정 요청시 화면에 progress 표시 여부( true 또는 false )\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.PushManager.setAlarm = function() {\n var action = 'setAlarm';\n\n // bizMOB push on/off기능: 사용자 앱 별 on/off(GCM, APNS는 디바이스 별 on/off)\n var params = Object.assign({}, {\n '_sPushKey' : bizMOBCore.DeviceManager.getInfo({\n '_sKey' : 'push_key'\n }),\n '_bEnabled' : true\n }, arguments[0]);\n var callback = bizMOBCore.CallbackManager.save(params._fCallback);\n var progressEnable = params._bProgressEnable === false ? false : true;",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 38,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 569,
    "char_count": 2049,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0039",
    "content": "var tr = {\n id : 'PUSH_UPDATE_ALARM_SETTING',\n param : {\n user_id : params._sUserId,\n push_key : params._sPushKey,\n enabled : params._bEnabled,\n callback : callback,\n read_timeout : 10*1000,\n progress : progressEnable\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 푸시 알람 수신여부 조회\n *\n * @param String _sUserId 푸시 알림 설정을 조회할 사용자 이이디.\n * @param Boolean _bProgressEnable (Default:true) 푸시 알람 설정 요청시 화면에 progress 표시 여부( true 또는 false )\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.PushManager.getAlarm = function() {\n var action = 'getAlarm';\n // 앱 종료후 재 시작시에 화면에 설정 여부를 표시하기 서버에 설정된 값을 조회\n var params = Object.assign({}, {\n '_sPushKey' : bizMOBCore.DeviceManager.getInfo({\n '_sKey' : 'push_key'\n }),\n }, arguments[0]);\n var callback = bizMOBCore.CallbackManager.save(params._fCallback);\n var progressEnable = params._bProgressEnable === false ? false : true;\n\n var tr = {\n id : 'PUSH_ALARM_SETTING_INFO',\n param : {\n user_id : params._sUserId,\n push_key : params._sPushKey,\n callback : callback,\n read_timeout : 10*1000,\n progress : progressEnable\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 푸시 수신 목록 조회\n *\n * @param String _sAppName 푸시 서버에 등록된 앱 이름.\n * @param String _sUserId 푸시 메세지를 조회할 사용자 이이디.\n * @param Number _nPageIndex 푸시 메세지를 가져올 페이징 값.\n * @param Number _nItemCount 푸시 메세지를 가져올 페이징 처리 갯수\n * @param Boolean _bProgressEnable (default:true) 푸시 서버와 통신 중일때 화면에 progress 를 표시할지에 대한 여부( true 또는 false )\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.PushManager.getMessageList = function() {\n var action = 'getMessageList';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var progressEnable = arguments[0]._bProgressEnable === false ? false : true;\n\n var tr = {\n id : 'PUSH_GET_MESSAGES',\n param : {\n app_name : arguments[0]._sAppName,\n page_index : arguments[0]._nPageIndex,\n item_count : arguments[0]._nItemCount,\n user_id : arguments[0]._sUserId,\n callback : callback,\n read_timeout : 10*1000,\n progress : progressEnable\n }\n };",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 39,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 594,
    "char_count": 2095,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0040",
    "content": "bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 푸시 메세지 읽기\n *\n * @param String _sTrxDay 푸시 메세지를 읽은 날짜.(yyyymmdd)\n * @param String _sTrxId 푸시 메세지 아이디.\n * @param String _sUserId 사용자 아이디.\n * @param Boolean _bProgressEnable (Default:true) 푸시 알람 설정 요청시 화면에 progress 표시 여부( true 또는 false )\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.PushManager.readMessage = function() {\n var action = 'read';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var progressEnable = arguments[0]._bProgressEnable === false ? false : true;\n\n var tr = {\n id : 'PUSH_MARK_AS_READ',\n param : {\n trx_day : arguments[0]._sTrxDay,\n trx_id : arguments[0]._sTrxId,\n user_id : arguments[0]._sUserId,\n read : true,\n callback : callback,\n read_timeout : 10*1000,\n progress : progressEnable\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 읽지 않은 푸시 메세지 카운트 조회\n *\n * @param String _sAppName 푸시 서버에 등록된 앱 이름.\n * @param String _sUserId 푸시 메세지를 조회할 사용자 이이디.\n * @param Boolean _bProgressEnable (Default:true) 푸시 알람 설정 요청시 화면에 progress 표시 여부( true 또는 false )\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.PushManager.getUnreadMessageCount = function() {\n var action = 'getUnreadMessageCount';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var progressEnable = arguments[0]._bProgressEnable === false ? false : true;\n\n var tr = {\n id : 'PUSH_GET_UNREAD_PUSH_MESSAGE_COUNT',\n param : {\n app_name : arguments[0]._sAppName,\n user_id : arguments[0]._sUserId,\n callback : callback,\n read_timeout : 10*1000,\n progress : progressEnable\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 앱 아이콘에 숫자 표시하기\n *\n * @param Number _nBadgeCount 뱃지에 표시할 값 .( 양수 : 표시할 갯수 , 0 : 뱃지카운트 초기화 )\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.PushManager.setBadgeCount = function() {\n var action = 'setBadgeCount';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 40,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 583,
    "char_count": 2065,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0041",
    "content": "var tr = {\n id : 'SET_BADGE_COUNT',\n param : {\n badge_count : arguments[0]._nBadgeCount,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 푸시 메세지 발송\n *\n * @param String _sAppName 푸시 메세지 보낼 앱 이름.\n * @param Array _aUsers 푸시 메세지 받을 사용자 목록.\n * @param String _sFromUser 푸시 메세지를 보낼 사용자 아이디.\n * @param String _sSubject 푸시 메세지 제목.\n * @param String _sContent 푸시 메세지 내용.\n * @param String _sTrxType (Default : INSTANT) 푸시 메세지 전송 방식.( INSTANT 또는 SCHEDULE )\n * @param String _sScheduleDate 푸시 메세지 전송 날짜.\n * @param Array _aGroups 푸시 메세지를 받을 그룹 목록\n * @param Boolean _bToAll (Default : false) 해당 앱을 사용하는 전체 사용자에게 푸시 메세지를 발송할지 여부.\n * @param String _sCategory (Default : def) 푸시 메세지 카테고리.\n * @param Object _oPayLoad 푸시 기폰 용량 초과시 전달할 메세지.\n * @param Boolean _bProgressEnable (Default:true) 푸시 알람 설정 요청시 화면에 progress 표시 여부( true 또는 false )\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.PushManager.sendMessage = function() {\n var action = 'sendMessage';\n var params = Object.assign({}, {\n // 예약발송/SCHEDULE or 즉시발송/INSTANT\n _sTrxType : 'INSTANT',\n _sScheduleDate : '',\n // bizPush에 있는 group ID\n _aGroups : [],\n _bToAll : false,\n _sCategory : 'def',\n // 대량 Push 메시지\n _oPayLoad : {}\n }, arguments[0]);\n var callback = bizMOBCore.CallbackManager.save(params._fCallback);\n var progressEnable = params._bProgressEnable === false ? false : true;\n\n var tr = {\n id : 'SEND_PUSH_MESSAGE',\n param : {\n trx_type : params._sTrxType,\n app_name : params._sAppName,\n schedule_date : params._sScheduleDate,\n to_users : params._aUsers,\n to_groups : params._aGroups,\n to_all : params._bToAll,\n from_user : params._sFromUser,\n message_subject : params._sSubject,\n message_content : params._sContent,\n message_category : params._sCategory,\n message_payload : params._oPayLoad,\n callback : callback,\n read_timeout : 10*1000,\n progress : progressEnable\n }\n\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 41,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 560,
    "char_count": 1967,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0042",
    "content": "};\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n * 대용량 푸시 메세지 읽기\n *\n * @param String _sMessageId 푸시 메세지 아이디.\n * @param String _sUserId 사용자 아이디.\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.PushManager.readReceiptMessage = function() {\n var action = 'readReceiptMessage';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id : 'CHECK_PUSH_RECEIVED',\n param : {\n callback : callback,\n user_id : arguments[0]._sUserId,\n message_id : arguments[0]._sMessageId\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename , action );\n};\n\n/**\n *\n * 01.클래스 설명 : Database 기능 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : 컨테이너 SQLite DB 사용 기능\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.Database = new Object();\n\nbizMOBCore.Database.servicename = 'Database';\nbizMOBCore.Database.config = {};\n\n/**\n * DataBase Open\n *\n * @param String _sDbName 오픈할 데이터베이스 명.\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.Database.openDatabase = function() {\n var action = 'openDatabase';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n var dbName = arguments[0]._sDbName;\n\n var tr = {\n id : 'OPEN_DATABASE',\n param : {\n db_name : dbName,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};\n\n/**\n * DataBase Close\n *\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.Database.closeDatabase = function() {\n var action = 'closeDatabase';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id : 'CLOSE_DATABASE',\n param : {\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};\n\n/**\n * DataBase Transaction 시작\n *\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.Database.beginTransaction = function() {\n var action = 'beginTransaction';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 42,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 558,
    "char_count": 2025,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0043",
    "content": "/**\n * DataBase Transaction 시작\n *\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.Database.beginTransaction = function() {\n var action = 'beginTransaction';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id : 'BEGIN_TRANSACTION',\n param : {\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};\n\n/**\n * DataBase Transaction Commit\n *\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.Database.commitTransaction = function() {\n var action = 'commitTransaction';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id : 'COMMIT_TRANSACTION',\n param : {\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};\n\n/**\n * DataBase Transaction Rollback\n *\n * @param Function _fCallback 결과를 받아 처리할 callback 함수.\n *\n * @return\n */\nbizMOBCore.Database.rollbackTransaction = function() {\n var action = 'rollbackTransaction';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id : 'ROLLBACK_TRANSACTION',\n param : {\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};\n\n/**\n * SQL쿼리문을 실행\n *\n * @param String _sQuery 실행할 SQL SELECT 쿼리문.\n * @param Array _aBindingValues 쿼리문의 각 변수 위치에 대입해줄 값의 배열.\n * @param Function _fCallback SQL쿼리문 실행 요청 후 호출되는 callback 함수.\n *\n * @return\n */\nbizMOBCore.Database.executeSql = function() {\n var action = 'executeSql';\n var query = arguments[0]._sQuery;\n var bidingValues = arguments[0]._aBindingValues ? arguments[0]._aBindingValues:[];\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id : 'EXECUTE_SQL',\n param : {\n query : query,\n bind_array : bidingValues,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 43,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 515,
    "char_count": 1896,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0044",
    "content": "var tr = {\n id : 'EXECUTE_SQL',\n param : {\n query : query,\n bind_array : bidingValues,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};\n\n/**\n * SELECT SQL쿼리문을 실행\n *\n * @param String _sQuery 실행할 SQL SELECT 쿼리문.\n * @param Array _aBindingValues 쿼리문의 각 변수 위치에 대입해줄 값의 배열.\n * @param Function _fCallback SQL쿼리문 실행 요청 후 호출되는 callback 함수.\n *\n * @return\n */\nbizMOBCore.Database.executeSelect = function() {\n var action = 'executeSelect';\n var query = arguments[0]._sQuery;\n var bidingValues = arguments[0]._aBindingValues ? arguments[0]._aBindingValues:[];\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id : 'EXECUTE_SELECT',\n param : {\n query : query,\n bind_array : bidingValues,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};\n\n/**\n * SQL쿼리문을 일괄 실행\n *\n * @param String _sQuery 실행할 SQL SELECT 쿼리문.\n * @param Array _aBindingValues 쿼리문의 각 변수 위치에 대입해줄 값의 배열.\n * @param Function _fCallback SQL쿼리문 실행 요청 후 호출되는 callback 함수.\n *\n * @return\n */\nbizMOBCore.Database.executeBatchSql = function() {\n // batch: 특정 query에 대해 반복할 때 사용\n var action = 'executeBatchSql';\n var query = arguments[0]._sQuery;\n var bidingValues = arguments[0]._aBindingValues ? arguments[0]._aBindingValues:[];\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id : 'EXECUTE_BATCH_SQL',\n param : {\n query : query,\n bind_array : bidingValues,\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};\n\n/**\n *\n * 01.클래스 설명 : Http 기능 클래스\n * 02.제품구분 : bizMOB Core\n * 03.기능(콤퍼넌트) 명 : bizMOB Http Client 관련 기능\n *\n * @author 김승현\n * @version 1.0\n *\n */\nbizMOBCore.Localization = new Object();\n\nbizMOBCore.Localization.servicename = 'Localization';\nbizMOBCore.Localization.config = {};\n\n// 현재 언어 값\nbizMOBCore.Localization.locale = '';",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 44,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 524,
    "char_count": 1874,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0045",
    "content": "bizMOBCore.Localization.servicename = 'Localization';\nbizMOBCore.Localization.config = {};\n\n// 현재 언어 값\nbizMOBCore.Localization.locale = '';\n\n// 언어 코드로 (언어코드)-(국가코드) 형태의 full locale 코드 반환\nbizMOBCore.Localization.getFullLocale = function(localeCode) {\n // 사용자 언어 목록에서 언어 코드(ko, ...)에 대응되는 full locale(ko-KR, ...) 코드\n var fullLocale = navigator.languages.find(function(lang) {\n return lang.toLowerCase().startsWith(localeCode.toLowerCase() + '-');\n });\n // 미리 지정한 언어 목록에서 언어 코드에 대응되는 preset locale 코드\n var presetLocale = window.bizMOBLocale[localeCode.toLowerCase()];\n\n // 전달받은 언어 코드가 full locale(ko-KR)값이라면 그대로 전달\n if (localeCode.indexOf('-') > 0) {\n bizMOBCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (parameter) ' + localeCode);\n return localeCode;\n }\n // 전달받은 언어 코드가 'ko' 형식이고, navigator.languages 목록에서 'ko-KR' 형식이 있다면 찾은 값 전달\n else if (fullLocale) {\n bizMOBCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (navigator) ' + fullLocale);\n return fullLocale;\n }\n // 전달받은 언어 코드가 'ko' 형식이고, 프리셋에 있다면 프리셋 언어코드를 전달\n else if (presetLocale) {\n bizMOBCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (preset) ' + presetLocale);\n return presetLocale;\n }\n // 전달받은 언어 코드가 navigator, 프리셋에 전부 없다면 전달받은 값 그대로 전달 (ko)\n else {\n bizMOBCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (unknown) ' + presetLocale);\n return localeCode;\n }\n};\n\n// 설정된 (언어)-(국가) 코드 조회\nbizMOBCore.Localization.getLocale = function() {\n var action = 'getlocale';\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id : 'LOCALE',\n param : {\n type : 'get',\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 45,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 518,
    "char_count": 1799,
    "created_at": "2025-08-01T16:17:10.827Z"
  },
  {
    "id": "5d01cb46_0046",
    "content": "var tr = {\n id : 'LOCALE',\n param : {\n type : 'get',\n callback : callback\n }\n };\n\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};\n\n// 언어코드에 맞는 (언어)-(국가) 코드 저장\nbizMOBCore.Localization.setLocale = function(arg) {\n var action = 'setlocale';\n // 언어 코드 (ko, ko-KR, en, en-US, ...)\n var localeCode = arg._sLocaleCd;\n // full locale 값 조회\n var fullLocale = bizMOBCore.Localization.getFullLocale(localeCode);\n var callback = bizMOBCore.CallbackManager.save(arguments[0]._fCallback);\n\n var tr = {\n id : 'LOCALE',\n param : {\n type : 'set',\n locale : fullLocale,\n callback : callback\n }\n };\n\n bizMOBCore.Localization.locale = fullLocale;\n bizMOBCore.Module.gateway(tr, this.servicename, action);\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core.js",
      "file_name": "bizMOB-core.js",
      "file_type": "js",
      "chunk_index": 46,
      "total_chunks": 47,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 600,
      "overlap": 80,
      "original_metadata": {
        "word_count": 10348,
        "parsed_at": "2025-08-01T07:01:18.407330"
      },
      "position": {}
    },
    "tokens": 190,
    "char_count": 699,
    "created_at": "2025-08-01T16:17:10.827Z"
  }
]