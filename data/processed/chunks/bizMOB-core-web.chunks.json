[
  {
    "id": "171bd2ec_0000",
    "content": "/**\n * @title bizMOB Web Extend\n * @author mhchoi@mcnc.co.kr\n * @version 1.0\n */\nvar bizMOBWebCore = {};\n\nbizMOBWebCore.name = 'bizMOBWebCore';\nbizMOBWebCore.version = '1.0';\n\n/**\n * Web Module Class\n */\nbizMOBWebCore.Module = {};\nbizMOBWebCore.Module.serviceName = 'Module';\nbizMOBWebCore.Module.config = {};\n\n// bizMOB Web Logger\nbizMOBWebCore.Module.logger = function (sService, sAction, sLogType, sMessage) {\n // 릴리즈 환경에서는 로그 출력 안함.\n if (bizMOBWebCore.App.config._bIsRelease) return;\n\n // 콘솔 로그 타입 스타일 정의\n var baseStyle = 'padding: 2px 4px; border-radius: 2px;';\n var infoStyle = baseStyle + ' color: white; background: #1a73e8;';\n var logStyle = baseStyle + ' color: white; background: #546e7a;';\n var debugStyle = baseStyle + ' color: white; background: #009688;';\n var warnStyle = baseStyle + ' color: white; background: #ffbb33;';\n var errorStyle = baseStyle + ' color: white; background: #d9534f;';\n\n // 콘솔 로그 Class 스타일 정의\n var bracketStyle = 'font-weight: bold;';\n var infoBracketStyle = bracketStyle + ' color: #1a73e8;';\n var logBracketStyle = bracketStyle + ' color: #546e7a;';\n var debugBracketStyle = bracketStyle + ' color: #009688;';\n var warnBracketStyle = bracketStyle + ' color: #ffbb33;';\n var errorBracketStyle = bracketStyle + ' color: #d9534f;';\n\n var msg = '';",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 0,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1284,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 346,
    "char_count": 1285,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "/**\n * @title bizMOB Web Extend\n * @author mhchoi@mcnc.co.kr\n * @version 1.0\n */\nvar bizMOBWebCore = {};\n\nbizMOBWebCore.name = 'bizMOBWebCore';\nbizMOBWebCore.version = '1.0';\n\n/**\n * Web Module Class\n */\nbizMOBWebCore.Module = {};\nbizMOBWebCore.Module.serviceName = 'Module';\nbizMOBWebCore.Module.config = {};\n\n// bizMOB Web Logger\nbizMOBWebCore.Module.logger = function (sService, sAction, sLogType, sMessage) {\n // 릴리즈 환경에서는 로그 출력 안함.\n if (bizMOBWebCore.App.config._bIsRelease) return;\n\n // 콘솔 로그 타입 스타일 정의\n var baseStyle = 'padding: 2px 4px; border-radius: 2px;';\n var infoStyle = baseStyle + ' color: white; background: #1a73e8;';\n var logStyle = baseStyle + ' color: white; background: #546e7a;';\n var debugStyle = baseStyle + ' color: white; background: #009688;';\n var warnStyle = baseStyle + ' color: white; background: #ffbb33;';\n var errorStyle = baseStyle + ' color: white; background: #d9534f;';\n\n // 콘솔 로그 Class 스타일 정의\n var bracketStyle = 'font-weight: bold;';\n var infoBracketStyle = bracketStyle + ' color: #1a73e8;';\n var logBracketStyle = bracketStyle + ' color: #546e7a;';\n var debugBracketStyle = bracketStyle + ' color: #009688;';\n var warnBracketStyle = bracketStyle + ' color: #ffbb33;';\n var errorBracketStyle = bracketStyle + ' color: #d9534f;';\n\n var msg = '';"
    }
  },
  {
    "id": "171bd2ec_0001",
    "content": "var msg = '';\n\n // JSON.stringify 오류시 빈 값으로 처리\n try {\n msg = typeof sMessage === 'object' ? JSON.stringify(sMessage) : sMessage;\n } catch (error) {\n msg = '';\n }\n\n // 콘솔 로그 정의\n var trace = '[Web][' + sService + ']' + '[' + sAction + ']';\n var log = msg.replace(/\\{/gi, '\\n{').replace(/\\}/gi, '}\\n').replace(/\\\\\"/gi, '');\n\n // 로그 출력\n switch (sLogType) {\n case 'I':\n console.info('%c bizMOB INFO %c ' + '%c' + trace + '%c ' + log, infoStyle, '', infoBracketStyle, '');\n break;\n case 'L':\n console.info('%c bizMOB LOG %c ' + '%c' + trace + '%c ' + log, logStyle, '', logBracketStyle, '');\n break;\n case 'D':\n console.info('%c bizMOB DEBUG %c ' + '%c' + trace + '%c ' + log, debugStyle, '', debugBracketStyle, '');\n break;\n case 'W':\n console.info('%c bizMOB WARN %c ' + '%c' + trace + '%c ' + log, warnStyle, '', warnBracketStyle, '');\n break;\n case 'E':\n console.info('%c bizMOB ERROR %c ' + '%c' + trace + '%c ' + log, errorStyle, '', errorBracketStyle, '');\n break;\n }\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 1,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 970,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 270,
    "char_count": 971,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "var msg = '';\n\n // JSON.stringify 오류시 빈 값으로 처리\n try {\n msg = typeof sMessage === 'object' ? JSON.stringify(sMessage) : sMessage;\n } catch (error) {\n msg = '';\n }\n\n // 콘솔 로그 정의\n var trace = '[Web][' + sService + ']' + '[' + sAction + ']';\n var log = msg.replace(/\\{/gi, '\\n{').replace(/\\}/gi, '}\\n').replace(/\\\\\"/gi, '');\n\n // 로그 출력\n switch (sLogType) {\n case 'I':\n console.info('%c bizMOB INFO %c ' + '%c' + trace + '%c ' + log, infoStyle, '', infoBracketStyle, '');\n break;\n case 'L':\n console.info('%c bizMOB LOG %c ' + '%c' + trace + '%c ' + log, logStyle, '', logBracketStyle, '');\n break;\n case 'D':\n console.info('%c bizMOB DEBUG %c ' + '%c' + trace + '%c ' + log, debugStyle, '', debugBracketStyle, '');\n break;\n case 'W':\n console.info('%c bizMOB WARN %c ' + '%c' + trace + '%c ' + log, warnStyle, '', warnBracketStyle, '');\n break;\n case 'E':\n console.info('%c bizMOB ERROR %c ' + '%c' + trace + '%c ' + log, errorStyle, '', errorBracketStyle, '');\n break;\n }\n};"
    }
  },
  {
    "id": "171bd2ec_0002",
    "content": "/**\n * 파라미터 체크\n *\n * @param Object oParams 확인될 파라미터 정보 객체.\n * @param Array aRequired 필수 파라미터 목록.\n *\n * @return boolean result 파라미터 체크 결과\n */\nbizMOBWebCore.Module.checkParam = function (oParams, aRequired) {\n var action = 'checkParam'; // 함수 동작을 식별하기 위한 변수\n var typeList = { // 변수 타입에 대한 매핑 객체\n 'a': 'array',\n 'o': 'object',\n 'f': 'function',\n 'b': 'boolean',\n 's': 'string',\n 'n': 'number',\n 'v': 'variable',\n 'e': 'element',\n };\n\n var param = oParams || {}; // 전달된 파라미터 객체\n var paramKeys = Object.keys(param); // 전달된 파라미터 객체의 속성 목록\n var required = aRequired || []; // 필수 파라미터 목록\n var missingKeys = required.filter(function (key) { // 없는 필수 파라미터 목록\n return paramKeys.indexOf(key) === -1;\n });",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 2,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 691,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 209,
    "char_count": 692,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "/**\n * 파라미터 체크\n *\n * @param Object oParams 확인될 파라미터 정보 객체.\n * @param Array aRequired 필수 파라미터 목록.\n *\n * @return boolean result 파라미터 체크 결과\n */\nbizMOBWebCore.Module.checkParam = function (oParams, aRequired) {\n var action = 'checkParam'; // 함수 동작을 식별하기 위한 변수\n var typeList = { // 변수 타입에 대한 매핑 객체\n 'a': 'array',\n 'o': 'object',\n 'f': 'function',\n 'b': 'boolean',\n 's': 'string',\n 'n': 'number',\n 'v': 'variable',\n 'e': 'element',\n };\n\n var param = oParams || {}; // 전달된 파라미터 객체\n var paramKeys = Object.keys(param); // 전달된 파라미터 객체의 속성 목록\n var required = aRequired || []; // 필수 파라미터 목록\n var missingKeys = required.filter(function (key) { // 없는 필수 파라미터 목록\n return paramKeys.indexOf(key) === -1;\n });"
    }
  },
  {
    "id": "171bd2ec_0003",
    "content": "// 전달된 파라미터가 오브젝트가 아닌 경우\n if (typeof param !== 'object') {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Invalid parameter format. Parameter have to define JSON.'); // 로그 출력\n return false;\n }\n // 전달된 파라미터가 없는 경우\n else if (!paramKeys.length) {\n if (required.length == 0) { // 필수 파라미터가 없는 경우\n return true; // 유효성 검사 통과\n }\n else {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'L', 'Cannot found parameters.'); // 로그 출력\n return false; // 유효성 검사 실패\n }\n }\n // 필수 파라미터가 없는 경우\n else if (missingKeys.length) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter is required. - ' + missingKeys.join(', ')); // 로그 출력\n return false;\n }\n // 정상 파라미터\n else {\n // 파라미터 객체 속성 순회\n for (var key in param) {\n if (Object.hasOwnProperty.call(param, key)) {\n var type = key.substring(1, 2); // key값 앞에 _s, _n...에서 s, n...을 추출\n var value = param[key]; // value",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 3,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 879,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 259,
    "char_count": 880,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "// 전달된 파라미터가 오브젝트가 아닌 경우\n if (typeof param !== 'object') {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Invalid parameter format. Parameter have to define JSON.'); // 로그 출력\n return false;\n }\n // 전달된 파라미터가 없는 경우\n else if (!paramKeys.length) {\n if (required.length == 0) { // 필수 파라미터가 없는 경우\n return true; // 유효성 검사 통과\n }\n else {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'L', 'Cannot found parameters.'); // 로그 출력\n return false; // 유효성 검사 실패\n }\n }\n // 필수 파라미터가 없는 경우\n else if (missingKeys.length) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter is required. - ' + missingKeys.join(', ')); // 로그 출력\n return false;\n }\n // 정상 파라미터\n else {\n // 파라미터 객체 속성 순회\n for (var key in param) {\n if (Object.hasOwnProperty.call(param, key)) {\n var type = key.substring(1, 2); // key값 앞에 _s, _n...에서 s, n...을 추출\n var value = param[key]; // value"
    }
  },
  {
    "id": "171bd2ec_0004",
    "content": "// 속성 값이 없는 경우\n if (value === undefined) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'L', 'Parameter is undefined. it skip check - ' + key); // 로그 출력\n }\n // 속성 값이 null인 경우\n else if (value === null) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'L', 'Parameter is null. it skip check. - ' + key); // 로그 출력\n }\n // 정의되지 않은 타입이면 false\n if (typeList[type] === undefined) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter is unknown variable type. - ' + key); // 로그 출력\n return false;\n }\n // 배열 타입인데, 배열이 아닌 경우 false\n else if (typeList[type] === 'array' && !Array.isArray(value)) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter is not an array. - ' + key); // 로그 출력\n return false;\n }\n // 배열 타입인데, 배열이 비어있는 경우 false\n else if (typeList[type] === 'array' && value.length === 0) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter is empty Array. - ' + key); // 로그 출력\n return false;\n }\n // 오브젝트 타입인데, 오브젝트가 아닌 경우 false\n else if (typeList[type] === 'object' && typeof value !== 'object') {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter is not an object. - ' + key); // 로그 출력\n return false;\n }\n // 그 외 타입인데, 타입이 다른 경우 false\n else if (typeList[type] !== typeof value) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter have wrong value. - ' + key); // 로그 출력",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 4,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1382,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 394,
    "char_count": 1383,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "// 속성 값이 없는 경우\n if (value === undefined) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'L', 'Parameter is undefined. it skip check - ' + key); // 로그 출력\n }\n // 속성 값이 null인 경우\n else if (value === null) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'L', 'Parameter is null. it skip check. - ' + key); // 로그 출력\n }\n // 정의되지 않은 타입이면 false\n if (typeList[type] === undefined) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter is unknown variable type. - ' + key); // 로그 출력\n return false;\n }\n // 배열 타입인데, 배열이 아닌 경우 false\n else if (typeList[type] === 'array' && !Array.isArray(value)) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter is not an array. - ' + key); // 로그 출력\n return false;\n }\n // 배열 타입인데, 배열이 비어있는 경우 false\n else if (typeList[type] === 'array' && value.length === 0) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter is empty Array. - ' + key); // 로그 출력\n return false;\n }\n // 오브젝트 타입인데, 오브젝트가 아닌 경우 false\n else if (typeList[type] === 'object' && typeof value !== 'object') {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter is not an object. - ' + key); // 로그 출력\n return false;\n }\n // 그 외 타입인데, 타입이 다른 경우 false\n else if (typeList[type] !== typeof value) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter have wrong value. - ' + key); // 로그 출력"
    }
  },
  {
    "id": "171bd2ec_0005",
    "content": "else if (typeList[type] !== typeof value) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter have wrong value. - ' + key); // 로그 출력\n return false;\n }\n // variable 또는 element 타입인 경우 true\n else if (typeList[type] === 'variable' || typeList[type] === 'element') {\n return true;\n }\n // 유효성 검사 통과\n else {\n return true;\n }\n }\n }\n }\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 5,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 349,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 98,
    "char_count": 350,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "else if (typeList[type] !== typeof value) {\n bizMOBWebCore.Module.logger(this.serviceName, action, 'E', 'Parameter have wrong value. - ' + key); // 로그 출력\n return false;\n }\n // variable 또는 element 타입인 경우 true\n else if (typeList[type] === 'variable' || typeList[type] === 'element') {\n return true;\n }\n // 유효성 검사 통과\n else {\n return true;\n }\n }\n }\n }\n};"
    }
  },
  {
    "id": "171bd2ec_0006",
    "content": "/**\n * Web EventManager Class\n */\nbizMOBWebCore.EventManager = {};\nbizMOBWebCore.EventManager.serviceName = 'EventManager';\nbizMOBWebCore.EventManager.config = {};\n\nbizMOBWebCore.EventManager.storage = {\n // Web init\n 'ready': true,\n};\n\n// 이벤트 셋업 (웹에서는 EventManager.storage에 있는 이벤트를 set시 바로 실행)\nbizMOBWebCore.EventManager.set = function () {\n var sEvent = arguments[0]._sEvent;\n var fCallback = arguments[0]._fCallback;\n\n if (bizMOBWebCore.EventManager.storage[sEvent]) {\n bizMOBWebCore.Module.logger(this.servicename, 'setEvent', 'L', 'Event execute. - ' + sEvent);\n fCallback({ type: 'web' });\n }\n else {\n bizMOBWebCore.Module.logger(this.servicename, 'setEvent', 'E', 'This event is not supported on the web. - ' + sEvent);\n }\n};\n\n/**\n * Web ExtendManager Class\n */\nbizMOBWebCore.ExtendsManager = {};\nbizMOBWebCore.ExtendsManager.serviceName = 'ExtendsManager';\nbizMOBWebCore.ExtendsManager.config = {};\n\n/**\n * Web App Class\n */\nbizMOBWebCore.App = {};\nbizMOBWebCore.App.serviceName = 'App';\nbizMOBWebCore.App.config = {\n _bIsRelease: false, // 릴리즈 여부\n _sAppKey: '', // App Key\n};\n\n/**\n * Web Contacts Class\n */\nbizMOBWebCore.Contacts = {};\nbizMOBWebCore.Contacts.serviceName = 'Contacts';\nbizMOBWebCore.Contacts.config = {};\n\n/**\n * Web Database Class\n */\nbizMOBWebCore.Database = {};\nbizMOBWebCore.Database.serviceName = 'Database';\nbizMOBWebCore.Database.config = {};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 6,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1373,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 369,
    "char_count": 1374,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "/**\n * Web EventManager Class\n */\nbizMOBWebCore.EventManager = {};\nbizMOBWebCore.EventManager.serviceName = 'EventManager';\nbizMOBWebCore.EventManager.config = {};\n\nbizMOBWebCore.EventManager.storage = {\n // Web init\n 'ready': true,\n};\n\n// 이벤트 셋업 (웹에서는 EventManager.storage에 있는 이벤트를 set시 바로 실행)\nbizMOBWebCore.EventManager.set = function () {\n var sEvent = arguments[0]._sEvent;\n var fCallback = arguments[0]._fCallback;\n\n if (bizMOBWebCore.EventManager.storage[sEvent]) {\n bizMOBWebCore.Module.logger(this.servicename, 'setEvent', 'L', 'Event execute. - ' + sEvent);\n fCallback({ type: 'web' });\n }\n else {\n bizMOBWebCore.Module.logger(this.servicename, 'setEvent', 'E', 'This event is not supported on the web. - ' + sEvent);\n }\n};\n\n/**\n * Web ExtendManager Class\n */\nbizMOBWebCore.ExtendsManager = {};\nbizMOBWebCore.ExtendsManager.serviceName = 'ExtendsManager';\nbizMOBWebCore.ExtendsManager.config = {};\n\n/**\n * Web App Class\n */\nbizMOBWebCore.App = {};\nbizMOBWebCore.App.serviceName = 'App';\nbizMOBWebCore.App.config = {\n _bIsRelease: false, // 릴리즈 여부\n _sAppKey: '', // App Key\n};\n\n/**\n * Web Contacts Class\n */\nbizMOBWebCore.Contacts = {};\nbizMOBWebCore.Contacts.serviceName = 'Contacts';\nbizMOBWebCore.Contacts.config = {};\n\n/**\n * Web Database Class\n */\nbizMOBWebCore.Database = {};\nbizMOBWebCore.Database.serviceName = 'Database';\nbizMOBWebCore.Database.config = {};"
    }
  },
  {
    "id": "171bd2ec_0007",
    "content": "/**\n * Web Database Class\n */\nbizMOBWebCore.Database = {};\nbizMOBWebCore.Database.serviceName = 'Database';\nbizMOBWebCore.Database.config = {};\n\n/**\n * Web Device Class\n */\nbizMOBWebCore.DeviceManager = {};\nbizMOBWebCore.DeviceManager.serviceName = 'DeviceManager';\n\n// 단말기 정보조회\nbizMOBWebCore.DeviceManager.getInfo = function () {\n return arguments[0] && arguments[0]._sKey\n ? window.bizMOB.Device.Info[arguments[0]._sKey]\n : window.bizMOB.Device.Info;\n};\n\n// 단말기 정보조회\nbizMOBWebCore.DeviceManager.setInfo = function () {\n window.bizMOB.Device.Info[arguments[0]._sKey] = arguments[0]._sValue;\n};\n\n// App 판단 여부\nbizMOBWebCore.DeviceManager.isApp = function () {\n return !!window.BMCManager || (!!window.webkit && !!window.webkit.messageHandlers && !!window.webkit.messageHandlers.BMCManager);\n};\n\n// Web 판단 여부\nbizMOBWebCore.DeviceManager.isWeb = function () {\n return !bizMOBWebCore.DeviceManager.isApp();\n};\n\n// Mobile 여부\nbizMOBWebCore.DeviceManager.isMobile = function () {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return UA && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(UA);\n};\n\n// PC 여부\nbizMOBWebCore.DeviceManager.isPC = function () {\n return !bizMOBWebCore.DeviceManager.isMobile();\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 7,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1241,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 334,
    "char_count": 1242,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "/**\n * Web Database Class\n */\nbizMOBWebCore.Database = {};\nbizMOBWebCore.Database.serviceName = 'Database';\nbizMOBWebCore.Database.config = {};\n\n/**\n * Web Device Class\n */\nbizMOBWebCore.DeviceManager = {};\nbizMOBWebCore.DeviceManager.serviceName = 'DeviceManager';\n\n// 단말기 정보조회\nbizMOBWebCore.DeviceManager.getInfo = function () {\n return arguments[0] && arguments[0]._sKey\n ? window.bizMOB.Device.Info[arguments[0]._sKey]\n : window.bizMOB.Device.Info;\n};\n\n// 단말기 정보조회\nbizMOBWebCore.DeviceManager.setInfo = function () {\n window.bizMOB.Device.Info[arguments[0]._sKey] = arguments[0]._sValue;\n};\n\n// App 판단 여부\nbizMOBWebCore.DeviceManager.isApp = function () {\n return !!window.BMCManager || (!!window.webkit && !!window.webkit.messageHandlers && !!window.webkit.messageHandlers.BMCManager);\n};\n\n// Web 판단 여부\nbizMOBWebCore.DeviceManager.isWeb = function () {\n return !bizMOBWebCore.DeviceManager.isApp();\n};\n\n// Mobile 여부\nbizMOBWebCore.DeviceManager.isMobile = function () {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return UA && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(UA);\n};\n\n// PC 여부\nbizMOBWebCore.DeviceManager.isPC = function () {\n return !bizMOBWebCore.DeviceManager.isMobile();\n};"
    }
  },
  {
    "id": "171bd2ec_0008",
    "content": "// PC 여부\nbizMOBWebCore.DeviceManager.isPC = function () {\n return !bizMOBWebCore.DeviceManager.isMobile();\n};\n\n// Android 여부\nbizMOBWebCore.DeviceManager.isAndroid = function () {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return /android/i.test(UA);\n};\n\n// IOS 여부\nbizMOBWebCore.DeviceManager.isIOS = function () {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return /iPad|iPhone|iPod/.test(UA) && !window.MSStream;\n};\n\n// Tablet 여부\nbizMOBWebCore.DeviceManager.isTablet = function () {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(UA.toLowerCase());\n};\n\n//Phone 여부\nbizMOBWebCore.DeviceManager.isPhone = function () {\n return bizMOBWebCore.DeviceManager.isMobile() && !bizMOBWebCore.DeviceManager.isTablet();\n};\n\n/**\n * Web File Class\n */\nbizMOBWebCore.File = {};\nbizMOBWebCore.File.serviceName = 'File';\nbizMOBWebCore.File.config = {};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 8,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1030,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 276,
    "char_count": 1031,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "// PC 여부\nbizMOBWebCore.DeviceManager.isPC = function () {\n return !bizMOBWebCore.DeviceManager.isMobile();\n};\n\n// Android 여부\nbizMOBWebCore.DeviceManager.isAndroid = function () {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return /android/i.test(UA);\n};\n\n// IOS 여부\nbizMOBWebCore.DeviceManager.isIOS = function () {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return /iPad|iPhone|iPod/.test(UA) && !window.MSStream;\n};\n\n// Tablet 여부\nbizMOBWebCore.DeviceManager.isTablet = function () {\n var UA = navigator.userAgent || navigator.vendor || window.opera;\n return /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(UA.toLowerCase());\n};\n\n//Phone 여부\nbizMOBWebCore.DeviceManager.isPhone = function () {\n return bizMOBWebCore.DeviceManager.isMobile() && !bizMOBWebCore.DeviceManager.isTablet();\n};\n\n/**\n * Web File Class\n */\nbizMOBWebCore.File = {};\nbizMOBWebCore.File.serviceName = 'File';\nbizMOBWebCore.File.config = {};"
    }
  },
  {
    "id": "171bd2ec_0009",
    "content": "/**\n * Web File Class\n */\nbizMOBWebCore.File = {};\nbizMOBWebCore.File.serviceName = 'File';\nbizMOBWebCore.File.config = {};\n\n/**\n * Web Network Class\n */\nbizMOBWebCore.Network = {};\nbizMOBWebCore.Network.serviceName = 'Network';\nbizMOBWebCore.Network.config = {\n _sBaseUrl: '', // Client Base Url\n _sApiContext: '', // Client Context\n _sProxContext: '', // Proxy Context\n _bIsProxy: false, // Proxy 사용 여부\n _sJwtToken: '', // JWT Token\n _bIsCrypto: false, // 암호화 여부\n _sCryAuthToken: '', // 암호화 Token\n _sCrySymKey: '', // 암호화 Key\n};\n\n// locale 변경\nbizMOBWebCore.Network.changeLocale = function (arg) {\n // 언어 코드 (ko, ko-KR, en, en-US, ...)\n var localeCode = arg._sLocaleCd;\n // full locale 값 조회\n var fullLocale = bizMOBWebCore.Localization.getFullLocale(localeCode);\n\n // Web 환경에 맞는 언어코드 변경 로직\n bizMOBWebCore.Localization.locale = fullLocale;\n bizMOBWebCore.Module.logger(this.serviceName, 'changeLocale', 'L', 'Network locale change: ' + fullLocale);\n};\n\n// 메시지 암호화\nbizMOBWebCore.Network.encryption = function () {\n var CryptoJS = window.CryptoJS;\n var arg = arguments[0] || {};\n var message = arg._sMessage || '';",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 9,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1111,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 305,
    "char_count": 1112,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "/**\n * Web File Class\n */\nbizMOBWebCore.File = {};\nbizMOBWebCore.File.serviceName = 'File';\nbizMOBWebCore.File.config = {};\n\n/**\n * Web Network Class\n */\nbizMOBWebCore.Network = {};\nbizMOBWebCore.Network.serviceName = 'Network';\nbizMOBWebCore.Network.config = {\n _sBaseUrl: '', // Client Base Url\n _sApiContext: '', // Client Context\n _sProxContext: '', // Proxy Context\n _bIsProxy: false, // Proxy 사용 여부\n _sJwtToken: '', // JWT Token\n _bIsCrypto: false, // 암호화 여부\n _sCryAuthToken: '', // 암호화 Token\n _sCrySymKey: '', // 암호화 Key\n};\n\n// locale 변경\nbizMOBWebCore.Network.changeLocale = function (arg) {\n // 언어 코드 (ko, ko-KR, en, en-US, ...)\n var localeCode = arg._sLocaleCd;\n // full locale 값 조회\n var fullLocale = bizMOBWebCore.Localization.getFullLocale(localeCode);\n\n // Web 환경에 맞는 언어코드 변경 로직\n bizMOBWebCore.Localization.locale = fullLocale;\n bizMOBWebCore.Module.logger(this.serviceName, 'changeLocale', 'L', 'Network locale change: ' + fullLocale);\n};\n\n// 메시지 암호화\nbizMOBWebCore.Network.encryption = function () {\n var CryptoJS = window.CryptoJS;\n var arg = arguments[0] || {};\n var message = arg._sMessage || '';"
    }
  },
  {
    "id": "171bd2ec_0010",
    "content": "// 메시지 암호화\nbizMOBWebCore.Network.encryption = function () {\n var CryptoJS = window.CryptoJS;\n var arg = arguments[0] || {};\n var message = arg._sMessage || '';\n\n try {\n var key = atob(bizMOBWebCore.Network.config._sCrySymKey);\n var iv = bizMOBWebCore.Network.config._sCrySymKey.substring(0, 16);\n var encrypt = CryptoJS.AES.encrypt(message, CryptoJS.enc.Utf8.parse(key), {\n iv: CryptoJS.enc.Utf8.parse(iv),\n mode: CryptoJS.mode.CBC,\n padding: CryptoJS.pad.Pkcs7,\n });\n\n bizMOBWebCore.Module.logger(this.serviceName, 'encryption', 'L', 'Message encryption success: ' + message);\n return { result: true, message: encrypt.toString() };\n }\n catch (error) {\n bizMOBWebCore.Module.logger(this.serviceName, 'encryption', 'E', 'Message encryption failed: ' + message);\n return { result: false, message: message };\n }\n};\n\n// 메시지 복호화\nbizMOBWebCore.Network.decryption = function () {\n var CryptoJS = window.CryptoJS;\n var arg = arguments[0] || {};\n var message = arg._sMessage || '';\n\n try {\n var key = atob(bizMOBWebCore.Network.config._sCrySymKey);\n var iv = bizMOBWebCore.Network.config._sCrySymKey.substring(0, 16);\n var decipher = CryptoJS.AES.decrypt(message, CryptoJS.enc.Utf8.parse(key), {\n iv: CryptoJS.enc.Utf8.parse(iv),\n mode: CryptoJS.mode.CBC,\n padding: CryptoJS.pad.Pkcs7,\n });",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 10,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1280,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 342,
    "char_count": 1281,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "// 메시지 암호화\nbizMOBWebCore.Network.encryption = function () {\n var CryptoJS = window.CryptoJS;\n var arg = arguments[0] || {};\n var message = arg._sMessage || '';\n\n try {\n var key = atob(bizMOBWebCore.Network.config._sCrySymKey);\n var iv = bizMOBWebCore.Network.config._sCrySymKey.substring(0, 16);\n var encrypt = CryptoJS.AES.encrypt(message, CryptoJS.enc.Utf8.parse(key), {\n iv: CryptoJS.enc.Utf8.parse(iv),\n mode: CryptoJS.mode.CBC,\n padding: CryptoJS.pad.Pkcs7,\n });\n\n bizMOBWebCore.Module.logger(this.serviceName, 'encryption', 'L', 'Message encryption success: ' + message);\n return { result: true, message: encrypt.toString() };\n }\n catch (error) {\n bizMOBWebCore.Module.logger(this.serviceName, 'encryption', 'E', 'Message encryption failed: ' + message);\n return { result: false, message: message };\n }\n};\n\n// 메시지 복호화\nbizMOBWebCore.Network.decryption = function () {\n var CryptoJS = window.CryptoJS;\n var arg = arguments[0] || {};\n var message = arg._sMessage || '';\n\n try {\n var key = atob(bizMOBWebCore.Network.config._sCrySymKey);\n var iv = bizMOBWebCore.Network.config._sCrySymKey.substring(0, 16);\n var decipher = CryptoJS.AES.decrypt(message, CryptoJS.enc.Utf8.parse(key), {\n iv: CryptoJS.enc.Utf8.parse(iv),\n mode: CryptoJS.mode.CBC,\n padding: CryptoJS.pad.Pkcs7,\n });"
    }
  },
  {
    "id": "171bd2ec_0011",
    "content": "bizMOBWebCore.Module.logger(this.serviceName, 'encryption', 'L', 'Message decryption success: ' + message);\n return { result: true, message: decipher.toString(CryptoJS.enc.Utf8) };\n }\n catch (error) {\n bizMOBWebCore.Module.logger(this.serviceName, 'encryption', 'E', 'Message decryption failed: ' + message);\n return { result: false, message: message };\n }\n};\n\n/**\n * bizMOB Web Server Request\n * @param {string} _sTrcode bizMOB Server 전문코드\n * @param {object} _oHeader bizMOB Server 전문 Header 객체\n * @param {object} _oBody bizMOB Server 전문 Body 객체\n * @param {boolean} _bProgressEnable (default: true) 서버에 통신 요청시 progress 표시 여부( true 또는 false )\n * @param {number} _nTimeout (default: 60) 서버에 통신 요청시 timeout 시간 (sec)\n * @param {function} _fCallback 서버와 통신 후 실행될 callback 함수\n *\n * @return\n */\nbizMOBWebCore.Network.requestTr = function (arg) {\n /** Parameter 셋팅 */\n var timeout = (arg._nTimeout ? arg._nTimeout : 60) * 1000; // native api와 시간 단위를 맞춤\n var message = {\n header: Object.assign({}, {\n result: true,\n error_code: '',\n error_text: '',\n info_text: '',\n message_version: '',\n login_session_id: '',\n trcode: arg._sTrcode\n }, arg._oHeader),\n body: arg._oBody\n };\n var body = {\n message: JSON.stringify(message)\n };",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 11,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1215,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 336,
    "char_count": 1216,
    "created_at": "2025-08-02T07:56:39.543Z",
    "enrichments": {
      "embedded_text": "bizMOBWebCore.Module.logger(this.serviceName, 'encryption', 'L', 'Message decryption success: ' + message);\n return { result: true, message: decipher.toString(CryptoJS.enc.Utf8) };\n }\n catch (error) {\n bizMOBWebCore.Module.logger(this.serviceName, 'encryption', 'E', 'Message decryption failed: ' + message);\n return { result: false, message: message };\n }\n};\n\n/**\n * bizMOB Web Server Request\n * @param {string} _sTrcode bizMOB Server 전문코드\n * @param {object} _oHeader bizMOB Server 전문 Header 객체\n * @param {object} _oBody bizMOB Server 전문 Body 객체\n * @param {boolean} _bProgressEnable (default: true) 서버에 통신 요청시 progress 표시 여부( true 또는 false )\n * @param {number} _nTimeout (default: 60) 서버에 통신 요청시 timeout 시간 (sec)\n * @param {function} _fCallback 서버와 통신 후 실행될 callback 함수\n *\n * @return\n */\nbizMOBWebCore.Network.requestTr = function (arg) {\n /** Parameter 셋팅 */\n var timeout = (arg._nTimeout ? arg._nTimeout : 60) * 1000; // native api와 시간 단위를 맞춤\n var message = {\n header: Object.assign({}, {\n result: true,\n error_code: '',\n error_text: '',\n info_text: '',\n message_version: '',\n login_session_id: '',\n trcode: arg._sTrcode\n }, arg._oHeader),\n body: arg._oBody\n };\n var body = {\n message: JSON.stringify(message)\n };"
    }
  },
  {
    "id": "171bd2ec_0012",
    "content": "/** bizMOB Auth Token */\n if (bizMOBWebCore.Network.config._bIsCrypto && !!bizMOBWebCore.Network.config._sCryAuthToken) {\n var crypto = bizMOBWebCore.Network.encryption({ _sMessage: body.message });\n\n // 암호화 성공시 암호화된 값으로 변경\n if (crypto.result) {\n body.message = crypto.message;\n body.isCrypto = true;\n }\n // 암호화 실패시 기존 값 유지\n else {\n body.isCrypto = false;\n }\n }\n\n /** Http.fetch 호출 */\n // url 생성\n var isProxy = bizMOBWebCore.Network.config._bIsProxy; // serve, build\n var context = isProxy ? bizMOBWebCore.Network.config._sProxContext : bizMOBWebCore.Network.config._sApiContext;\n var url = (bizMOBWebCore.Network.config._sApiContext === '/' ? '' : context) + '/' + arg._sTrcode + '.json' + (arg._sQuery ? '?' + arg._sQuery : ''); // 일반 조화시 url\n\n // fetch 옵션 생성\n var option = bizMOBWebCore.Http.bizmobOption({\n _sTrcode: arg._sTrcode,\n _oHttpHeader: arg._oHttpHeader,\n _oBody: body,\n });\n\n // fetch 호출\n bizMOBWebCore.Http.fetch(url, option, timeout)\n .then(function (res) {\n var message = res.data;\n\n // 복호화 필요시\n if (bizMOBWebCore.Network.config._bIsCrypto && !!bizMOBWebCore.Network.config._sCryAuthToken && message.resMessage) {\n var crypto = bizMOBWebCore.Network.decryption({ _sMessage: message.resMessage });\n\n // 복호화 성공시 결과값 전달\n if (crypto.result) {\n message = JSON.parse(crypto.message);\n }\n }",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 12,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1299,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 358,
    "char_count": 1300,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "/** bizMOB Auth Token */\n if (bizMOBWebCore.Network.config._bIsCrypto && !!bizMOBWebCore.Network.config._sCryAuthToken) {\n var crypto = bizMOBWebCore.Network.encryption({ _sMessage: body.message });\n\n // 암호화 성공시 암호화된 값으로 변경\n if (crypto.result) {\n body.message = crypto.message;\n body.isCrypto = true;\n }\n // 암호화 실패시 기존 값 유지\n else {\n body.isCrypto = false;\n }\n }\n\n /** Http.fetch 호출 */\n // url 생성\n var isProxy = bizMOBWebCore.Network.config._bIsProxy; // serve, build\n var context = isProxy ? bizMOBWebCore.Network.config._sProxContext : bizMOBWebCore.Network.config._sApiContext;\n var url = (bizMOBWebCore.Network.config._sApiContext === '/' ? '' : context) + '/' + arg._sTrcode + '.json' + (arg._sQuery ? '?' + arg._sQuery : ''); // 일반 조화시 url\n\n // fetch 옵션 생성\n var option = bizMOBWebCore.Http.bizmobOption({\n _sTrcode: arg._sTrcode,\n _oHttpHeader: arg._oHttpHeader,\n _oBody: body,\n });\n\n // fetch 호출\n bizMOBWebCore.Http.fetch(url, option, timeout)\n .then(function (res) {\n var message = res.data;\n\n // 복호화 필요시\n if (bizMOBWebCore.Network.config._bIsCrypto && !!bizMOBWebCore.Network.config._sCryAuthToken && message.resMessage) {\n var crypto = bizMOBWebCore.Network.decryption({ _sMessage: message.resMessage });\n\n // 복호화 성공시 결과값 전달\n if (crypto.result) {\n message = JSON.parse(crypto.message);\n }\n }"
    }
  },
  {
    "id": "171bd2ec_0013",
    "content": "// 복호화 성공시 결과값 전달\n if (crypto.result) {\n message = JSON.parse(crypto.message);\n }\n }\n\n // callback 함수 호출\n bizMOBWebCore.Module.logger(bizMOBWebCore.Network.serviceName, 'requestTr', 'L', 'Request trcode success: ' + arg._sTrcode);\n arg._fCallback && arg._fCallback(message);\n })\n .catch(function () {\n bizMOBWebCore.Module.logger(bizMOBWebCore.Network.serviceName, 'requestTr', 'E', 'Request trcode failed: ' + arg._sTrcode);\n arg._fCallback && arg._fCallback({\n header: Object.assign({}, message.header || {}, {\n result: false,\n error_code: 'NE0002',\n }),\n });\n });\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 13,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 568,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 156,
    "char_count": 569,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "// 복호화 성공시 결과값 전달\n if (crypto.result) {\n message = JSON.parse(crypto.message);\n }\n }\n\n // callback 함수 호출\n bizMOBWebCore.Module.logger(bizMOBWebCore.Network.serviceName, 'requestTr', 'L', 'Request trcode success: ' + arg._sTrcode);\n arg._fCallback && arg._fCallback(message);\n })\n .catch(function () {\n bizMOBWebCore.Module.logger(bizMOBWebCore.Network.serviceName, 'requestTr', 'E', 'Request trcode failed: ' + arg._sTrcode);\n arg._fCallback && arg._fCallback({\n header: Object.assign({}, message.header || {}, {\n result: false,\n error_code: 'NE0002',\n }),\n });\n });\n};"
    }
  },
  {
    "id": "171bd2ec_0014",
    "content": "/**\n * bizMOB Web Server Request Login\n * @param {string} _sUserId 인증 받을 사용자 아이디\n * @param {string} _sPassword 인증 받을 사용자 패스워드\n * @param {string} _sTrcode 레거시 로그인 인증 전문코드\n * @param {string} _oHeader 레거시 로그인 인증 전문 Header 객체\n * @param {string} _oBody 레거시 로그인 인증 전문 Body 객체\n * @param {boolean} _bProgressEnable (default:true) 서버에 통신 요청시 progress 표시 여부( true 또는 false )\n * @param {number} _nTimeout (default: 60) 서버에 통신 요청시 timeout 시간 (sec)\n * @param {function} _fCallback 서버와 통신 후 실행될 callback 함수\n */\nbizMOBWebCore.Network.requestLogin = function (arg) {\n /** Parameter 셋팅 */\n var timeout = (arg._nTimeout ? arg._nTimeout : 60) * 1000; // native api와 시간 단위를 맞춤\n var legacy_message = {\n header: Object.assign({}, {\n result: true,\n error_code: '',\n error_text: '',\n info_text: '',\n message_version: '',\n login_session_id: '',\n trcode: arg._sTrcode\n }, arg._oHeader),\n body: arg._oBody\n };\n var message = {\n header: {\n result: true,\n error_code: '',\n error_text: '',\n info_text: '',\n locale: bizMOBWebCore.Localization.locale,\n message_version: '',\n login_session_id: '',\n trcode: 'LOGIN',\n },\n body: {\n os_type: 'web',\n user_id: arg._sUserId,\n password: arg._sPassword,\n legacy_message: legacy_message,\n legacy_trcode: arg._sTrcode,\n app_key: bizMOBWebCore.App.config._sAppKey,\n emulator_flag: true,\n manual_phone_number: false,\n device_id: '',\n phone_number: '',\n },\n };\n var body = {",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 14,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1378,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 390,
    "char_count": 1379,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "/**\n * bizMOB Web Server Request Login\n * @param {string} _sUserId 인증 받을 사용자 아이디\n * @param {string} _sPassword 인증 받을 사용자 패스워드\n * @param {string} _sTrcode 레거시 로그인 인증 전문코드\n * @param {string} _oHeader 레거시 로그인 인증 전문 Header 객체\n * @param {string} _oBody 레거시 로그인 인증 전문 Body 객체\n * @param {boolean} _bProgressEnable (default:true) 서버에 통신 요청시 progress 표시 여부( true 또는 false )\n * @param {number} _nTimeout (default: 60) 서버에 통신 요청시 timeout 시간 (sec)\n * @param {function} _fCallback 서버와 통신 후 실행될 callback 함수\n */\nbizMOBWebCore.Network.requestLogin = function (arg) {\n /** Parameter 셋팅 */\n var timeout = (arg._nTimeout ? arg._nTimeout : 60) * 1000; // native api와 시간 단위를 맞춤\n var legacy_message = {\n header: Object.assign({}, {\n result: true,\n error_code: '',\n error_text: '',\n info_text: '',\n message_version: '',\n login_session_id: '',\n trcode: arg._sTrcode\n }, arg._oHeader),\n body: arg._oBody\n };\n var message = {\n header: {\n result: true,\n error_code: '',\n error_text: '',\n info_text: '',\n locale: bizMOBWebCore.Localization.locale,\n message_version: '',\n login_session_id: '',\n trcode: 'LOGIN',\n },\n body: {\n os_type: 'web',\n user_id: arg._sUserId,\n password: arg._sPassword,\n legacy_message: legacy_message,\n legacy_trcode: arg._sTrcode,\n app_key: bizMOBWebCore.App.config._sAppKey,\n emulator_flag: true,\n manual_phone_number: false,\n device_id: '',\n phone_number: '',\n },\n };\n var body = {"
    }
  },
  {
    "id": "171bd2ec_0015",
    "content": "app_key: bizMOBWebCore.App.config._sAppKey,\n emulator_flag: true,\n manual_phone_number: false,\n device_id: '',\n phone_number: '',\n },\n };\n var body = {\n message: JSON.stringify(message)\n };",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 15,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 188,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 51,
    "char_count": 189,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "app_key: bizMOBWebCore.App.config._sAppKey,\n emulator_flag: true,\n manual_phone_number: false,\n device_id: '',\n phone_number: '',\n },\n };\n var body = {\n message: JSON.stringify(message)\n };"
    }
  },
  {
    "id": "171bd2ec_0016",
    "content": "/** bizMOB Auth Token */\n if (bizMOBWebCore.Network.config._bIsCrypto && !!bizMOBWebCore.Network.config._sCryAuthToken) {\n var crypto = bizMOBWebCore.Network.encryption({ _sMessage: body.message });\n\n // 암호화 성공시 암호화된 값으로 변경\n if (crypto.result) {\n body.message = crypto.message;\n body.isCrypto = true;\n }\n // 암호화 실패시 기존 값 유지\n else {\n body.isCrypto = false;\n }\n }\n\n /** Http.fetch 호출 */\n // url 생성\n var isProxy = bizMOBWebCore.Network.config._bIsProxy; // serve, build\n var context = isProxy ? bizMOBWebCore.Network.config._sProxContext : bizMOBWebCore.Network.config._sApiContext;\n var url = (bizMOBWebCore.Network.config._sApiContext === '/' ? '' : context) + '/LOGIN.json' + (arg._sQuery ? '?' + arg._sQuery : ''); // 일반 조화시 url\n\n // fetch 옵션 생성\n var option = bizMOBWebCore.Http.bizmobOption({\n _sTrcode: 'LOGIN',\n _oHttpHeader: arg._oHttpHeader,\n _oBody: body,\n });\n\n /** Http.fetch 호출 */\n bizMOBWebCore.Http.fetch(url, option, timeout)\n .then(function (res) {\n var message = res.data;\n\n // 복호화 필요시\n if (bizMOBWebCore.Network.config._bIsCrypto && !!bizMOBWebCore.Network.config._sCryAuthToken && message.resMessage) {\n var crypto = bizMOBWebCore.Network.decryption({ _sMessage: message.resMessage });\n\n // 복호화 성공시 결과값 전달\n if (crypto.result) {\n message = JSON.parse(crypto.message);\n }\n }",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 16,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1288,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 355,
    "char_count": 1289,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "/** bizMOB Auth Token */\n if (bizMOBWebCore.Network.config._bIsCrypto && !!bizMOBWebCore.Network.config._sCryAuthToken) {\n var crypto = bizMOBWebCore.Network.encryption({ _sMessage: body.message });\n\n // 암호화 성공시 암호화된 값으로 변경\n if (crypto.result) {\n body.message = crypto.message;\n body.isCrypto = true;\n }\n // 암호화 실패시 기존 값 유지\n else {\n body.isCrypto = false;\n }\n }\n\n /** Http.fetch 호출 */\n // url 생성\n var isProxy = bizMOBWebCore.Network.config._bIsProxy; // serve, build\n var context = isProxy ? bizMOBWebCore.Network.config._sProxContext : bizMOBWebCore.Network.config._sApiContext;\n var url = (bizMOBWebCore.Network.config._sApiContext === '/' ? '' : context) + '/LOGIN.json' + (arg._sQuery ? '?' + arg._sQuery : ''); // 일반 조화시 url\n\n // fetch 옵션 생성\n var option = bizMOBWebCore.Http.bizmobOption({\n _sTrcode: 'LOGIN',\n _oHttpHeader: arg._oHttpHeader,\n _oBody: body,\n });\n\n /** Http.fetch 호출 */\n bizMOBWebCore.Http.fetch(url, option, timeout)\n .then(function (res) {\n var message = res.data;\n\n // 복호화 필요시\n if (bizMOBWebCore.Network.config._bIsCrypto && !!bizMOBWebCore.Network.config._sCryAuthToken && message.resMessage) {\n var crypto = bizMOBWebCore.Network.decryption({ _sMessage: message.resMessage });\n\n // 복호화 성공시 결과값 전달\n if (crypto.result) {\n message = JSON.parse(crypto.message);\n }\n }"
    }
  },
  {
    "id": "171bd2ec_0017",
    "content": "// 복호화 성공시 결과값 전달\n if (crypto.result) {\n message = JSON.parse(crypto.message);\n }\n }\n\n // callback 함수 호출\n bizMOBWebCore.Module.logger(bizMOBWebCore.Network.serviceName, 'requestTr', 'L', 'Request login success: ' + arg._sTrcode);\n arg._fCallback && arg._fCallback(message.header.result\n ? Object.assign({}, message.body.legacy_message, {\n accessToken: message.body.accessToken,\n accessTokenExpTime: message.body.accessTokenExpTime,\n refreshToken: message.body.refreshToken,\n refreshTokenExpTime: message.body.refreshTokenExpTime,\n })\n : message);\n })\n .catch(function () {\n bizMOBWebCore.Module.logger(bizMOBWebCore.Network.serviceName, 'requestTr', 'E', 'Request login failed: ' + arg._sTrcode);\n arg._fCallback && arg._fCallback({\n header: Object.assign({}, message.header || {}, {\n result: false,\n error_code: 'NE0002',\n }),\n });\n });\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 17,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 839,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 227,
    "char_count": 840,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "// 복호화 성공시 결과값 전달\n if (crypto.result) {\n message = JSON.parse(crypto.message);\n }\n }\n\n // callback 함수 호출\n bizMOBWebCore.Module.logger(bizMOBWebCore.Network.serviceName, 'requestTr', 'L', 'Request login success: ' + arg._sTrcode);\n arg._fCallback && arg._fCallback(message.header.result\n ? Object.assign({}, message.body.legacy_message, {\n accessToken: message.body.accessToken,\n accessTokenExpTime: message.body.accessTokenExpTime,\n refreshToken: message.body.refreshToken,\n refreshTokenExpTime: message.body.refreshTokenExpTime,\n })\n : message);\n })\n .catch(function () {\n bizMOBWebCore.Module.logger(bizMOBWebCore.Network.serviceName, 'requestTr', 'E', 'Request login failed: ' + arg._sTrcode);\n arg._fCallback && arg._fCallback({\n header: Object.assign({}, message.header || {}, {\n result: false,\n error_code: 'NE0002',\n }),\n });\n });\n};"
    }
  },
  {
    "id": "171bd2ec_0018",
    "content": "/**\n * bizMOB Server 전문 통신\n *\n * @param {String} _sUrl 서버 URL\n * @param {String} _sMethod 통신 방식 (get, post)\n * @param {String} _oHeader Http Header\n * @param {String} _oBody Http Body\n * @param {Number} _nTimeout (default: 60) 서버에 통신 요청시 timeout 시간 (sec)\n * @param {Function} _fCallback 서버와 통신 후 실행될 callback 함수\n *\n * @returns {Object} Response 객체\n * @returns {Boolean} returns.result 결과\n * @returns {Number} returns.response_code 응답 코드 (200 <= .. <= 300)\n * @returns {String} returns.response_data 응답 데이터\n * @returns {Object} returns.error 응답 실패시 에러 객체 (실패시에만 존재)\n * @returns {Number} returns.error.code Native 응답 실패코드 (ERR000)\n * @returns {String} returns.error.message Native에서 주는 응답 실패 메시지\n * @returns {Number} returns.error.response_code Server 응답 실패코드 (401, 402, ...) -- 없을 수도 있음\n * @returns {String} returns.error.response_data Server 응답 실패 데이터 -- 없을 수도 있음\n */\nbizMOBWebCore.Network.requestHttp = function (arg) {\n var action = 'requestHttp';\n\n var url = arg._sUrl;\n var timeout = (arg._nTimeout ? arg._nTimeout : 60) * 1000;\n var option = Object.assign({}, arg._oOption, {\n method: arg._sMethod,\n headers: Object.assign({}, {\n 'Content-Type': 'application/json'\n }, arg._oHeader),\n });",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 18,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1192,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 339,
    "char_count": 1193,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "/**\n * bizMOB Server 전문 통신\n *\n * @param {String} _sUrl 서버 URL\n * @param {String} _sMethod 통신 방식 (get, post)\n * @param {String} _oHeader Http Header\n * @param {String} _oBody Http Body\n * @param {Number} _nTimeout (default: 60) 서버에 통신 요청시 timeout 시간 (sec)\n * @param {Function} _fCallback 서버와 통신 후 실행될 callback 함수\n *\n * @returns {Object} Response 객체\n * @returns {Boolean} returns.result 결과\n * @returns {Number} returns.response_code 응답 코드 (200 <= .. <= 300)\n * @returns {String} returns.response_data 응답 데이터\n * @returns {Object} returns.error 응답 실패시 에러 객체 (실패시에만 존재)\n * @returns {Number} returns.error.code Native 응답 실패코드 (ERR000)\n * @returns {String} returns.error.message Native에서 주는 응답 실패 메시지\n * @returns {Number} returns.error.response_code Server 응답 실패코드 (401, 402, ...) -- 없을 수도 있음\n * @returns {String} returns.error.response_data Server 응답 실패 데이터 -- 없을 수도 있음\n */\nbizMOBWebCore.Network.requestHttp = function (arg) {\n var action = 'requestHttp';\n\n var url = arg._sUrl;\n var timeout = (arg._nTimeout ? arg._nTimeout : 60) * 1000;\n var option = Object.assign({}, arg._oOption, {\n method: arg._sMethod,\n headers: Object.assign({}, {\n 'Content-Type': 'application/json'\n }, arg._oHeader),\n });"
    }
  },
  {
    "id": "171bd2ec_0019",
    "content": "// Body 메시지 처리\n if (arg._oBody) {\n // Get 처리\n if (option.method.toLocaleUpperCase() === 'GET') {\n url += '?' + new URLSearchParams(arg._oBody || {}).toString();\n }\n // 그 외 method 처리\n else {\n option.body = new URLSearchParams(arg._oBody || {}).toString();\n }\n }\n\n // Http.fetch 요청\n bizMOBWebCore.Http.fetch(url, option, timeout)\n .then(function (res) {\n let responseData = null;\n\n try {\n // 보통 JSON 형태의 응답값\n responseData = JSON.stringify(res.data);\n } catch (error) {\n // 오류가 난 경우 전달받은 값 전달\n responseData = res.data;\n }\n\n if (200 <= res.status && res.status < 300) {\n arg._fCallback && arg._fCallback({\n result: true,\n response_code: res.status,\n response_data: responseData,\n });\n }\n else {\n arg._fCallback && arg._fCallback({\n result: false,\n error: {\n code: 'ERR001',\n message: 'Response failed',\n response_code: res.status,\n response_data: responseData,\n },\n });\n }\n })\n .catch(function (res) {\n arg._fCallback && arg._fCallback({\n result: false,\n error: {\n code: 'ERR000',\n message: 'Request failed',\n response_code: res.status,\n response_data: res.data,\n },\n });\n });\n};\n\n/**\n * Web Properties Class\n */\nbizMOBWebCore.Properties = {};\nbizMOBWebCore.Properties.prefix = 'bizMOB:WEB:PROPERTIES:';\nbizMOBWebCore.Properties.serviceName = 'Properties';\nbizMOBWebCore.Properties.config = {};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 19,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1289,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 351,
    "char_count": 1290,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "// Body 메시지 처리\n if (arg._oBody) {\n // Get 처리\n if (option.method.toLocaleUpperCase() === 'GET') {\n url += '?' + new URLSearchParams(arg._oBody || {}).toString();\n }\n // 그 외 method 처리\n else {\n option.body = new URLSearchParams(arg._oBody || {}).toString();\n }\n }\n\n // Http.fetch 요청\n bizMOBWebCore.Http.fetch(url, option, timeout)\n .then(function (res) {\n let responseData = null;\n\n try {\n // 보통 JSON 형태의 응답값\n responseData = JSON.stringify(res.data);\n } catch (error) {\n // 오류가 난 경우 전달받은 값 전달\n responseData = res.data;\n }\n\n if (200 <= res.status && res.status < 300) {\n arg._fCallback && arg._fCallback({\n result: true,\n response_code: res.status,\n response_data: responseData,\n });\n }\n else {\n arg._fCallback && arg._fCallback({\n result: false,\n error: {\n code: 'ERR001',\n message: 'Response failed',\n response_code: res.status,\n response_data: responseData,\n },\n });\n }\n })\n .catch(function (res) {\n arg._fCallback && arg._fCallback({\n result: false,\n error: {\n code: 'ERR000',\n message: 'Request failed',\n response_code: res.status,\n response_data: res.data,\n },\n });\n });\n};\n\n/**\n * Web Properties Class\n */\nbizMOBWebCore.Properties = {};\nbizMOBWebCore.Properties.prefix = 'bizMOB:WEB:PROPERTIES:';\nbizMOBWebCore.Properties.serviceName = 'Properties';\nbizMOBWebCore.Properties.config = {};"
    }
  },
  {
    "id": "171bd2ec_0020",
    "content": "/**\n * bizMOB Web Properties Set\n * @param {object} arg\n * @param {string} arg._sKey Properties key\n * @param {any} arg._vValue Properties value\n * @param {object[]} arg._aList data map list (Ex. [{_sKey: \"1\", _vValue: \"1\"}, ...])\n */\nbizMOBWebCore.Properties.set = function (arg) {\n var dataList = [];\n\n if (Object.hasOwnProperty.call(arg, '_aList')) {\n dataList = arg._aList;\n }\n else {\n dataList = [arg];\n }\n\n dataList.forEach(function (data) {\n var prop = bizMOBWebCore.Properties.prefix + data._sKey;\n var value = data._vValue;\n\n bizMOBWebCore.Module.logger(bizMOBWebCore.Properties.serviceName, 'set', 'L', 'bizMOB properties set: ' + data._sKey);\n localStorage.setItem(prop, value);\n });\n};\n\n/**\n * bizMOB Web Properties Get\n * @param {object} arg\n * @param {string} arg._sKey Properties key\n * @returns Properties value\n */\nbizMOBWebCore.Properties.get = function (arg) {\n var prefix = bizMOBWebCore.Properties.prefix;\n\n if (arg && Object.hasOwnProperty.call(arg, '_sKey')) {\n var prop = prefix + arg._sKey;\n\n return localStorage.getItem(prop);\n }\n else {\n var storage = localStorage;\n var result = {};\n\n for (var key in storage) {\n if (Object.hasOwnProperty.call(storage, key)) {\n if (key.indexOf(prefix) === 0) {\n result[key.replace(prefix, '')] = storage[key];\n }\n }\n }\n\n return result;\n }\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 20,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1302,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 345,
    "char_count": 1303,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "/**\n * bizMOB Web Properties Set\n * @param {object} arg\n * @param {string} arg._sKey Properties key\n * @param {any} arg._vValue Properties value\n * @param {object[]} arg._aList data map list (Ex. [{_sKey: \"1\", _vValue: \"1\"}, ...])\n */\nbizMOBWebCore.Properties.set = function (arg) {\n var dataList = [];\n\n if (Object.hasOwnProperty.call(arg, '_aList')) {\n dataList = arg._aList;\n }\n else {\n dataList = [arg];\n }\n\n dataList.forEach(function (data) {\n var prop = bizMOBWebCore.Properties.prefix + data._sKey;\n var value = data._vValue;\n\n bizMOBWebCore.Module.logger(bizMOBWebCore.Properties.serviceName, 'set', 'L', 'bizMOB properties set: ' + data._sKey);\n localStorage.setItem(prop, value);\n });\n};\n\n/**\n * bizMOB Web Properties Get\n * @param {object} arg\n * @param {string} arg._sKey Properties key\n * @returns Properties value\n */\nbizMOBWebCore.Properties.get = function (arg) {\n var prefix = bizMOBWebCore.Properties.prefix;\n\n if (arg && Object.hasOwnProperty.call(arg, '_sKey')) {\n var prop = prefix + arg._sKey;\n\n return localStorage.getItem(prop);\n }\n else {\n var storage = localStorage;\n var result = {};\n\n for (var key in storage) {\n if (Object.hasOwnProperty.call(storage, key)) {\n if (key.indexOf(prefix) === 0) {\n result[key.replace(prefix, '')] = storage[key];\n }\n }\n }\n\n return result;\n }\n};"
    }
  },
  {
    "id": "171bd2ec_0021",
    "content": "return result;\n }\n};\n\n/**\n * bizMOB Web Properties Remove\n * @param {object} arg\n * @param {string} arg._sKey Properties key\n */\nbizMOBWebCore.Properties.remove = function (arg) {\n var prop = bizMOBWebCore.Properties.prefix + arg._sKey;\n\n bizMOBWebCore.Module.logger(bizMOBWebCore.Properties.serviceName, 'remove', 'L', 'bizMOB properties remove: ' + arg._sKey);\n\n localStorage.removeItem(prop);\n return true;\n};\n\n/**\n * Web Storage Class\n */\nbizMOBWebCore.Storage = {};\nbizMOBWebCore.Storage.prefix = 'bizMOB:WEB:STORAGE:';\nbizMOBWebCore.Storage.serviceName = 'Storage';\nbizMOBWebCore.Storage.config = {};\n\n/**\n * bizMOB Web Storage Set\n * @param {object} arg\n * @param {string} arg._sKey Storage key\n * @param {any} arg._vValue Storage value\n * @param {object[]} arg._aList data map list (Ex. [{_sKey: \"1\", _vValue: \"1\"}, ...])\n */\nbizMOBWebCore.Storage.set = function (arg) {\n var dataList = [];\n\n if (Object.hasOwnProperty.call(arg, '_aList')) {\n dataList = arg._aList;\n }\n else {\n dataList = [arg];\n }\n\n dataList.forEach(function (data) {\n var prop = bizMOBWebCore.Storage.prefix + data._sKey;\n var value = typeof data._vValue === 'string' ? data._vValue : JSON.stringify(data._vValue);\n\n bizMOBWebCore.Module.logger(bizMOBWebCore.Storage.serviceName, 'set', 'L', 'bizMOB storage set: ' + data._sKey);\n sessionStorage.setItem(prop, value);\n });\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 21,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1351,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 358,
    "char_count": 1352,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "return result;\n }\n};\n\n/**\n * bizMOB Web Properties Remove\n * @param {object} arg\n * @param {string} arg._sKey Properties key\n */\nbizMOBWebCore.Properties.remove = function (arg) {\n var prop = bizMOBWebCore.Properties.prefix + arg._sKey;\n\n bizMOBWebCore.Module.logger(bizMOBWebCore.Properties.serviceName, 'remove', 'L', 'bizMOB properties remove: ' + arg._sKey);\n\n localStorage.removeItem(prop);\n return true;\n};\n\n/**\n * Web Storage Class\n */\nbizMOBWebCore.Storage = {};\nbizMOBWebCore.Storage.prefix = 'bizMOB:WEB:STORAGE:';\nbizMOBWebCore.Storage.serviceName = 'Storage';\nbizMOBWebCore.Storage.config = {};\n\n/**\n * bizMOB Web Storage Set\n * @param {object} arg\n * @param {string} arg._sKey Storage key\n * @param {any} arg._vValue Storage value\n * @param {object[]} arg._aList data map list (Ex. [{_sKey: \"1\", _vValue: \"1\"}, ...])\n */\nbizMOBWebCore.Storage.set = function (arg) {\n var dataList = [];\n\n if (Object.hasOwnProperty.call(arg, '_aList')) {\n dataList = arg._aList;\n }\n else {\n dataList = [arg];\n }\n\n dataList.forEach(function (data) {\n var prop = bizMOBWebCore.Storage.prefix + data._sKey;\n var value = typeof data._vValue === 'string' ? data._vValue : JSON.stringify(data._vValue);\n\n bizMOBWebCore.Module.logger(bizMOBWebCore.Storage.serviceName, 'set', 'L', 'bizMOB storage set: ' + data._sKey);\n sessionStorage.setItem(prop, value);\n });\n};"
    }
  },
  {
    "id": "171bd2ec_0022",
    "content": "bizMOBWebCore.Module.logger(bizMOBWebCore.Storage.serviceName, 'set', 'L', 'bizMOB storage set: ' + data._sKey);\n sessionStorage.setItem(prop, value);\n });\n};\n\n/**\n * bizMOB Web Storage Get\n * @param {object} arg\n * @param {string} arg._sKey Storage key\n * @returns Storage value\n */\nbizMOBWebCore.Storage.get = function (arg) {\n var prefix = bizMOBWebCore.Storage.prefix;\n\n if (arg && Object.hasOwnProperty.call(arg, '_sKey')) {\n var prop = prefix + arg._sKey;\n var value = sessionStorage.getItem(prop);\n\n if (value === null) {\n return null;\n }\n\n // JSON 파싱 시도\n try {\n return JSON.parse(value);\n } catch (error) {\n // JSON이 아닌 문자열인 경우 그대로 반환\n return value;\n }\n }\n else {\n var storage = sessionStorage;\n var result = {};\n\n for (var key in storage) {\n if (Object.hasOwnProperty.call(storage, key)) {\n if (key.indexOf(prefix) === 0) {\n var storageKey = key.replace(prefix, '');\n var storageValue = storage[key];\n\n // JSON 파싱 시도\n try {\n result[storageKey] = JSON.parse(storageValue);\n } catch (error) {\n // JSON이 아닌 문자열인 경우 그대로 저장\n result[storageKey] = storageValue;\n }\n }\n }\n }\n\n return result;\n }\n};\n\n/**\n * bizMOB Web Storage Remove\n * @param {object} arg\n * @param {string} arg._sKey Storage key\n */\nbizMOBWebCore.Storage.remove = function (arg) {\n var prop = bizMOBWebCore.Storage.prefix + arg._sKey;",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 22,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1301,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 352,
    "char_count": 1302,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "bizMOBWebCore.Module.logger(bizMOBWebCore.Storage.serviceName, 'set', 'L', 'bizMOB storage set: ' + data._sKey);\n sessionStorage.setItem(prop, value);\n });\n};\n\n/**\n * bizMOB Web Storage Get\n * @param {object} arg\n * @param {string} arg._sKey Storage key\n * @returns Storage value\n */\nbizMOBWebCore.Storage.get = function (arg) {\n var prefix = bizMOBWebCore.Storage.prefix;\n\n if (arg && Object.hasOwnProperty.call(arg, '_sKey')) {\n var prop = prefix + arg._sKey;\n var value = sessionStorage.getItem(prop);\n\n if (value === null) {\n return null;\n }\n\n // JSON 파싱 시도\n try {\n return JSON.parse(value);\n } catch (error) {\n // JSON이 아닌 문자열인 경우 그대로 반환\n return value;\n }\n }\n else {\n var storage = sessionStorage;\n var result = {};\n\n for (var key in storage) {\n if (Object.hasOwnProperty.call(storage, key)) {\n if (key.indexOf(prefix) === 0) {\n var storageKey = key.replace(prefix, '');\n var storageValue = storage[key];\n\n // JSON 파싱 시도\n try {\n result[storageKey] = JSON.parse(storageValue);\n } catch (error) {\n // JSON이 아닌 문자열인 경우 그대로 저장\n result[storageKey] = storageValue;\n }\n }\n }\n }\n\n return result;\n }\n};\n\n/**\n * bizMOB Web Storage Remove\n * @param {object} arg\n * @param {string} arg._sKey Storage key\n */\nbizMOBWebCore.Storage.remove = function (arg) {\n var prop = bizMOBWebCore.Storage.prefix + arg._sKey;"
    }
  },
  {
    "id": "171bd2ec_0023",
    "content": "bizMOBWebCore.Module.logger(bizMOBWebCore.Storage.serviceName, 'remove', 'L', 'bizMOB storage remove: ' + arg._sKey);\n\n sessionStorage.removeItem(prop);\n return true;\n};\n\n/**\n * Web PushManager Class\n */\nbizMOBWebCore.PushManager = {};\nbizMOBWebCore.PushManager.serviceName = 'PushManager';\nbizMOBWebCore.PushManager.config = {};\n\n/**\n * Web System Class\n */\nbizMOBWebCore.System = {};\nbizMOBWebCore.System.serviceName = 'System';\nbizMOBWebCore.System.config = {};\n\nbizMOBWebCore.System.getGPS = function (arg) {\n if ('geolocation' in navigator) {\n // Geolocation API 사용 가능\n navigator.geolocation.getCurrentPosition(function (position) {\n const latitude = position.coords.latitude;\n const longitude = position.coords.longitude;\n\n arg._fCallback && arg._fCallback({\n 'result': true,\n 'longitude': longitude,\n 'latitude': latitude,\n 'address': ''\n });\n }, function (error) {\n console.error('Geolocation error:', error);\n arg._fCallback && arg._fCallback({\n 'result': false,\n 'longitude': 0,\n 'latitude': 0,\n 'address': ''\n });\n });\n } else {\n // Geolocation API 사용 불가\n arg._fCallback && arg._fCallback({\n 'result': false,\n 'longitude': 0,\n 'latitude': 0,\n 'address': ''\n });\n }\n};\n\n/**\n * Web Window Class\n */\nbizMOBWebCore.Window = {};\nbizMOBWebCore.Window.serviceName = 'Window';\nbizMOBWebCore.Window.config = {};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 23,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1312,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 350,
    "char_count": 1313,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "bizMOBWebCore.Module.logger(bizMOBWebCore.Storage.serviceName, 'remove', 'L', 'bizMOB storage remove: ' + arg._sKey);\n\n sessionStorage.removeItem(prop);\n return true;\n};\n\n/**\n * Web PushManager Class\n */\nbizMOBWebCore.PushManager = {};\nbizMOBWebCore.PushManager.serviceName = 'PushManager';\nbizMOBWebCore.PushManager.config = {};\n\n/**\n * Web System Class\n */\nbizMOBWebCore.System = {};\nbizMOBWebCore.System.serviceName = 'System';\nbizMOBWebCore.System.config = {};\n\nbizMOBWebCore.System.getGPS = function (arg) {\n if ('geolocation' in navigator) {\n // Geolocation API 사용 가능\n navigator.geolocation.getCurrentPosition(function (position) {\n const latitude = position.coords.latitude;\n const longitude = position.coords.longitude;\n\n arg._fCallback && arg._fCallback({\n 'result': true,\n 'longitude': longitude,\n 'latitude': latitude,\n 'address': ''\n });\n }, function (error) {\n console.error('Geolocation error:', error);\n arg._fCallback && arg._fCallback({\n 'result': false,\n 'longitude': 0,\n 'latitude': 0,\n 'address': ''\n });\n });\n } else {\n // Geolocation API 사용 불가\n arg._fCallback && arg._fCallback({\n 'result': false,\n 'longitude': 0,\n 'latitude': 0,\n 'address': ''\n });\n }\n};\n\n/**\n * Web Window Class\n */\nbizMOBWebCore.Window = {};\nbizMOBWebCore.Window.serviceName = 'Window';\nbizMOBWebCore.Window.config = {};"
    }
  },
  {
    "id": "171bd2ec_0024",
    "content": "/**\n * Web Window Class\n */\nbizMOBWebCore.Window = {};\nbizMOBWebCore.Window.serviceName = 'Window';\nbizMOBWebCore.Window.config = {};\n\n/**\n * Web Localization Class\n */\nbizMOBWebCore.Localization = {};\nbizMOBWebCore.Localization.serviceName = 'Localization';\nbizMOBWebCore.Localization.config = {};\n\n// 현재 언어 값\nbizMOBWebCore.Localization.locale = '';\n\n// 언어 코드로 (언어코드)-(국가코드) 형태의 full locale 코드 반환\nbizMOBWebCore.Localization.getFullLocale = function (localeCode) {\n // 사용자 언어 목록에서 언어 코드(ko, ...)에 대응되는 full locale(ko-KR, ...) 코드\n var fullLocale = navigator.languages.find(function (lang) {\n return lang.toLowerCase().startsWith(localeCode.toLowerCase() + '-');\n });\n // 미리 지정한 언어 목록에서 언어 코드에 대응되는 preset locale 코드\n var presetLocale = window.bizMOBLocale[localeCode.toLowerCase()];",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 24,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 779,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 223,
    "char_count": 780,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "/**\n * Web Window Class\n */\nbizMOBWebCore.Window = {};\nbizMOBWebCore.Window.serviceName = 'Window';\nbizMOBWebCore.Window.config = {};\n\n/**\n * Web Localization Class\n */\nbizMOBWebCore.Localization = {};\nbizMOBWebCore.Localization.serviceName = 'Localization';\nbizMOBWebCore.Localization.config = {};\n\n// 현재 언어 값\nbizMOBWebCore.Localization.locale = '';\n\n// 언어 코드로 (언어코드)-(국가코드) 형태의 full locale 코드 반환\nbizMOBWebCore.Localization.getFullLocale = function (localeCode) {\n // 사용자 언어 목록에서 언어 코드(ko, ...)에 대응되는 full locale(ko-KR, ...) 코드\n var fullLocale = navigator.languages.find(function (lang) {\n return lang.toLowerCase().startsWith(localeCode.toLowerCase() + '-');\n });\n // 미리 지정한 언어 목록에서 언어 코드에 대응되는 preset locale 코드\n var presetLocale = window.bizMOBLocale[localeCode.toLowerCase()];"
    }
  },
  {
    "id": "171bd2ec_0025",
    "content": "// 전달받은 언어 코드가 full locale(ko-KR)값이라면 그대로 전달\n if (localeCode.indexOf('-') > 0) {\n bizMOBWebCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (parameter) ' + localeCode);\n return localeCode;\n }\n // 전달받은 언어 코드가 'ko' 형식이고, navigator.languages 목록에서 'ko-KR' 형식이 있다면 찾은 값 전달\n else if (fullLocale) {\n bizMOBWebCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (navigator) ' + fullLocale);\n return fullLocale;\n }\n // 전달받은 언어 코드가 'ko' 형식이고, 프리셋에 있다면 프리셋 언어코드를 전달\n else if (presetLocale) {\n bizMOBWebCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (preset) ' + presetLocale);\n return presetLocale;\n }\n // 전달받은 언어 코드가 navigator, 프리셋에 전부 없다면 전달받은 값 그대로 전달 (ko)\n else {\n bizMOBWebCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (unknown) ' + presetLocale);\n return localeCode;\n }\n};\n\n// 설정된 (언어)-(국가) 코드 조회\nbizMOBWebCore.Localization.getLocale = function (arg) {\n var locale = bizMOBWebCore.Localization.locale; // 설정한 언어 코드\n var defaultLocale = bizMOBWebCore.Localization.getFullLocale(navigator.language); // 기본 언어 코드",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 25,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1161,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 336,
    "char_count": 1162,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "// 전달받은 언어 코드가 full locale(ko-KR)값이라면 그대로 전달\n if (localeCode.indexOf('-') > 0) {\n bizMOBWebCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (parameter) ' + localeCode);\n return localeCode;\n }\n // 전달받은 언어 코드가 'ko' 형식이고, navigator.languages 목록에서 'ko-KR' 형식이 있다면 찾은 값 전달\n else if (fullLocale) {\n bizMOBWebCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (navigator) ' + fullLocale);\n return fullLocale;\n }\n // 전달받은 언어 코드가 'ko' 형식이고, 프리셋에 있다면 프리셋 언어코드를 전달\n else if (presetLocale) {\n bizMOBWebCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (preset) ' + presetLocale);\n return presetLocale;\n }\n // 전달받은 언어 코드가 navigator, 프리셋에 전부 없다면 전달받은 값 그대로 전달 (ko)\n else {\n bizMOBWebCore.Module.logger(this.serviceName, 'getFullLocale', 'L', 'Gets the full locale value: (unknown) ' + presetLocale);\n return localeCode;\n }\n};\n\n// 설정된 (언어)-(국가) 코드 조회\nbizMOBWebCore.Localization.getLocale = function (arg) {\n var locale = bizMOBWebCore.Localization.locale; // 설정한 언어 코드\n var defaultLocale = bizMOBWebCore.Localization.getFullLocale(navigator.language); // 기본 언어 코드"
    }
  },
  {
    "id": "171bd2ec_0026",
    "content": "// 설정한 locale가 있는 경우 (Ex. ko-KR)\n if (locale) {\n arg._fCallback && arg._fCallback({ result: true, locale: bizMOBWebCore.Localization.locale });\n }\n // 그 외에는 Default 언어 코드 전달\n else {\n arg._fCallback && arg._fCallback({ result: true, locale: defaultLocale });\n }\n};\n\n// 언어코드에 맞는 (언어)-(국가) 코드 저장\nbizMOBWebCore.Localization.setLocale = function (arg) {\n // 언어 코드 (ko, ko-KR, en, en-US, ...)\n var localeCode = arg._sLocaleCd;\n // full locale 값 조회\n var fullLocale = bizMOBWebCore.Localization.getFullLocale(localeCode);\n\n // Web 환경에 맞는 언어코드 변경 로직\n bizMOBWebCore.Localization.locale = fullLocale;\n bizMOBWebCore.Module.logger(this.serviceName, 'setLocale', 'L', 'Localization locale set: ' + fullLocale);\n\n // callback 함수 호출\n arg._fCallback && arg._fCallback({ result: true, locale: bizMOBWebCore.Localization.locale });\n};\n\n/**\n * Web Http Class\n */\nbizMOBWebCore.Http = {};\n\n// bizMOB Server용 fetch option 정보\nbizMOBWebCore.Http.bizmobOption = function () {\n var arg = arguments[0] || {};\n var httpHeader = arg._oHttpHeader || null; // http header\n var headers = Object.assign({}, {\n // 컨텐츠 타입\n 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n }, httpHeader);\n var body = arg._oBody || {}; // body data\n\n // 언어 코드 추가\n if (bizMOBWebCore.Localization.locale && !headers['Accept-Language']) {\n headers['Accept-Language'] = bizMOBWebCore.Localization.locale;\n }",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 26,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1370,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 380,
    "char_count": 1371,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "// 설정한 locale가 있는 경우 (Ex. ko-KR)\n if (locale) {\n arg._fCallback && arg._fCallback({ result: true, locale: bizMOBWebCore.Localization.locale });\n }\n // 그 외에는 Default 언어 코드 전달\n else {\n arg._fCallback && arg._fCallback({ result: true, locale: defaultLocale });\n }\n};\n\n// 언어코드에 맞는 (언어)-(국가) 코드 저장\nbizMOBWebCore.Localization.setLocale = function (arg) {\n // 언어 코드 (ko, ko-KR, en, en-US, ...)\n var localeCode = arg._sLocaleCd;\n // full locale 값 조회\n var fullLocale = bizMOBWebCore.Localization.getFullLocale(localeCode);\n\n // Web 환경에 맞는 언어코드 변경 로직\n bizMOBWebCore.Localization.locale = fullLocale;\n bizMOBWebCore.Module.logger(this.serviceName, 'setLocale', 'L', 'Localization locale set: ' + fullLocale);\n\n // callback 함수 호출\n arg._fCallback && arg._fCallback({ result: true, locale: bizMOBWebCore.Localization.locale });\n};\n\n/**\n * Web Http Class\n */\nbizMOBWebCore.Http = {};\n\n// bizMOB Server용 fetch option 정보\nbizMOBWebCore.Http.bizmobOption = function () {\n var arg = arguments[0] || {};\n var httpHeader = arg._oHttpHeader || null; // http header\n var headers = Object.assign({}, {\n // 컨텐츠 타입\n 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n }, httpHeader);\n var body = arg._oBody || {}; // body data\n\n // 언어 코드 추가\n if (bizMOBWebCore.Localization.locale && !headers['Accept-Language']) {\n headers['Accept-Language'] = bizMOBWebCore.Localization.locale;\n }"
    }
  },
  {
    "id": "171bd2ec_0027",
    "content": "// 언어 코드 추가\n if (bizMOBWebCore.Localization.locale && !headers['Accept-Language']) {\n headers['Accept-Language'] = bizMOBWebCore.Localization.locale;\n }\n\n // 암호화 코드 추가\n if (bizMOBWebCore.Network.config._bIsCrypto && !!bizMOBWebCore.Network.config._sCryAuthToken) {\n headers['BzCrypto-Authorization'] = 'BEAR ' + bizMOBWebCore.Network.config._sCryAuthToken;\n }\n\n // JWT Token 존재시 추가\n if (arg._sTrcode !== 'LOGIN' && bizMOBWebCore.Network.config._sJwtToken) {\n headers['Authorization'] = 'Bearer ' + bizMOBWebCore.Network.config._sJwtToken;\n }\n\n // 옵션 반환\n return {\n mode: 'cors', // no-cors, *cors, same-origin\n cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n method: 'POST',\n headers: headers,\n body: new URLSearchParams(body || {}).toString(),\n };\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 27,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 780,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 213,
    "char_count": 781,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "// 언어 코드 추가\n if (bizMOBWebCore.Localization.locale && !headers['Accept-Language']) {\n headers['Accept-Language'] = bizMOBWebCore.Localization.locale;\n }\n\n // 암호화 코드 추가\n if (bizMOBWebCore.Network.config._bIsCrypto && !!bizMOBWebCore.Network.config._sCryAuthToken) {\n headers['BzCrypto-Authorization'] = 'BEAR ' + bizMOBWebCore.Network.config._sCryAuthToken;\n }\n\n // JWT Token 존재시 추가\n if (arg._sTrcode !== 'LOGIN' && bizMOBWebCore.Network.config._sJwtToken) {\n headers['Authorization'] = 'Bearer ' + bizMOBWebCore.Network.config._sJwtToken;\n }\n\n // 옵션 반환\n return {\n mode: 'cors', // no-cors, *cors, same-origin\n cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n method: 'POST',\n headers: headers,\n body: new URLSearchParams(body || {}).toString(),\n };\n};"
    }
  },
  {
    "id": "171bd2ec_0028",
    "content": "/**\n * 요청 파라미터를 fetch 형태에 맞춰서 변경 후 요청\n * @param {object} arg 요청 객체\n * @param {string} arg._sUrl\n * @param {string} arg._sMethod 요청 방식 (GET, POST, PUT, DELETE, ...)\n * @param {number} arg._nTimeout 요청 제한시간 (sec 단위)\n * @param {number} arg._nRetries API 요청 회수 (default: 1 -- 한번 요청 실패시 응답)\n * @param {object} arg._oOption fetch options\n * @param {object} arg._oHeader request 요청 header\n * @param {object} arg._oBody request 요청 body -- JSON.stringify(data) 또는 new URLSearchParams(data).toString() 후 전달\n * @param {function} arg._fCallback (custom) 요청 성공/실패시 응답값 반환 함수\n * @return\n */\nbizMOBWebCore.Http.request = function (arg) {\n // 변수 설정\n var url = arg._sUrl;\n var option = Object.assign({}, arg._oOption, {\n method: arg._sMethod,\n headers: arg._oHeader,\n });\n var timeout = (arg._nTimeout ? arg._nTimeout : 60) * 1000; // requestTr과 시간 단위를 맞춤\n var retries = arg._nRetries;\n\n // Body 메시지 처리\n if (arg._oBody) {\n // Get 처리\n if (option.method.toLocaleUpperCase() === 'GET') {\n url += '?' + arg._oBody;\n }\n // 그 외 method 처리\n else {\n option.body = arg._oBody;\n }\n }\n\n // Http.fetch 요청\n bizMOBWebCore.Http.fetch(url, option, timeout, retries)\n .then(function (res) { arg._fCallback && arg._fCallback(res); })\n .catch(function (res) { arg._fCallback && arg._fCallback(res); });\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 28,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1267,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 360,
    "char_count": 1268,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "/**\n * 요청 파라미터를 fetch 형태에 맞춰서 변경 후 요청\n * @param {object} arg 요청 객체\n * @param {string} arg._sUrl\n * @param {string} arg._sMethod 요청 방식 (GET, POST, PUT, DELETE, ...)\n * @param {number} arg._nTimeout 요청 제한시간 (sec 단위)\n * @param {number} arg._nRetries API 요청 회수 (default: 1 -- 한번 요청 실패시 응답)\n * @param {object} arg._oOption fetch options\n * @param {object} arg._oHeader request 요청 header\n * @param {object} arg._oBody request 요청 body -- JSON.stringify(data) 또는 new URLSearchParams(data).toString() 후 전달\n * @param {function} arg._fCallback (custom) 요청 성공/실패시 응답값 반환 함수\n * @return\n */\nbizMOBWebCore.Http.request = function (arg) {\n // 변수 설정\n var url = arg._sUrl;\n var option = Object.assign({}, arg._oOption, {\n method: arg._sMethod,\n headers: arg._oHeader,\n });\n var timeout = (arg._nTimeout ? arg._nTimeout : 60) * 1000; // requestTr과 시간 단위를 맞춤\n var retries = arg._nRetries;\n\n // Body 메시지 처리\n if (arg._oBody) {\n // Get 처리\n if (option.method.toLocaleUpperCase() === 'GET') {\n url += '?' + arg._oBody;\n }\n // 그 외 method 처리\n else {\n option.body = arg._oBody;\n }\n }\n\n // Http.fetch 요청\n bizMOBWebCore.Http.fetch(url, option, timeout, retries)\n .then(function (res) { arg._fCallback && arg._fCallback(res); })\n .catch(function (res) { arg._fCallback && arg._fCallback(res); });\n};"
    }
  },
  {
    "id": "171bd2ec_0029",
    "content": "/**\n * Mock 데이터 호출\n * @param {String} sClassName 클래스 명칭\n * @param {String} sMethod 함수 명칭\n * @param {Object} oMessage 전달 파라미터\n */\nbizMOBWebCore.Http.requestMock = function (sClassName, sMethod, oMessage) {\n var call = oMessage._fCallback || oMessage.callback || null;\n var baseUrl = bizMOBWebCore.Network.config._sBaseUrl;\n var className = sClassName === 'PushManager' ? 'Push' : sClassName; // Push는 bizMOB과 Core의 클래스명이 다름\n var url = '';\n var option = {\n method: 'GET'\n };\n\n switch (sMethod) {\n case 'executer': // callPlugin\n url = baseUrl + 'mock/bizMOB/callPlugin/' + oMessage._sID + '/' + sMethod + '.json?param=' + JSON.stringify(oMessage._oParam);\n break;\n\n case 'requestTr': // 일반 전문\n case 'requestLogin': // 로그인 전문\n url = baseUrl + 'mock/' + oMessage._sTrcode + '.json?param=' + JSON.stringify(oMessage);\n break;\n\n case 'requestTimeout': // setTimeout\n url = baseUrl + 'mock/bizMOB/' + className + '/setTimeout.json?param=' + JSON.stringify(oMessage._oParam);\n break;\n\n default: // 평균\n url = baseUrl + 'mock/bizMOB/' + className + '/' + sMethod + '.json?param=' + JSON.stringify(oMessage);\n break;\n }",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 29,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1107,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 304,
    "char_count": 1108,
    "created_at": "2025-08-02T07:56:39.544Z",
    "enrichments": {
      "embedded_text": "/**\n * Mock 데이터 호출\n * @param {String} sClassName 클래스 명칭\n * @param {String} sMethod 함수 명칭\n * @param {Object} oMessage 전달 파라미터\n */\nbizMOBWebCore.Http.requestMock = function (sClassName, sMethod, oMessage) {\n var call = oMessage._fCallback || oMessage.callback || null;\n var baseUrl = bizMOBWebCore.Network.config._sBaseUrl;\n var className = sClassName === 'PushManager' ? 'Push' : sClassName; // Push는 bizMOB과 Core의 클래스명이 다름\n var url = '';\n var option = {\n method: 'GET'\n };\n\n switch (sMethod) {\n case 'executer': // callPlugin\n url = baseUrl + 'mock/bizMOB/callPlugin/' + oMessage._sID + '/' + sMethod + '.json?param=' + JSON.stringify(oMessage._oParam);\n break;\n\n case 'requestTr': // 일반 전문\n case 'requestLogin': // 로그인 전문\n url = baseUrl + 'mock/' + oMessage._sTrcode + '.json?param=' + JSON.stringify(oMessage);\n break;\n\n case 'requestTimeout': // setTimeout\n url = baseUrl + 'mock/bizMOB/' + className + '/setTimeout.json?param=' + JSON.stringify(oMessage._oParam);\n break;\n\n default: // 평균\n url = baseUrl + 'mock/bizMOB/' + className + '/' + sMethod + '.json?param=' + JSON.stringify(oMessage);\n break;\n }"
    }
  },
  {
    "id": "171bd2ec_0030",
    "content": "default: // 평균\n url = baseUrl + 'mock/bizMOB/' + className + '/' + sMethod + '.json?param=' + JSON.stringify(oMessage);\n break;\n }\n\n bizMOBWebCore.Http.fetch(url, option)\n .then(function (res) {\n bizMOBWebCore.Module.logger(className, sMethod, 'D', className + ' ' + sMethod + ' mock response.');\n if (sMethod === 'requestLogin') {\n var msg = Object.assign({}, res.data.body.legacy_message, {\n accessToken: res.data.body.accessToken,\n accessTokenExpTime: res.data.body.accessTokenExpTime,\n refreshToken: res.data.body.refreshToken,\n refreshTokenExpTime: res.data.body.refreshTokenExpTime,\n });\n call && call(msg);\n }\n else {\n call && call(res.data);\n }\n })\n .catch(function () {\n bizMOBWebCore.Module.logger(className, sMethod, 'E', className + ' ' + sMethod + ' mock not found.');\n call && call({ result: false, type: 'mock' });\n });\n};\n\n/**\n * timeout + retries + fetch\n * @param {string} url 요청 URL\n * @param {object} opt fetch 옵션\n * @param {number} limitTime Timeout 시간\n * @param {number} retries API 요청 회수\n *\n * @return\n * @param {boolean} ok 성공여부\n * @param {number} status 결과 코드 (200, 404, ...)\n * @param {string} statusText 결과 Text\n * @param {object} data 데이터\n */\nbizMOBWebCore.Http.fetch = function (url, opt, limitTime, retries) {\n var option = opt; // fetch option 셋팅\n var limit = limitTime || (60 * 1000); // timeout 시간\n var retry = retries || 1; // 재요청 회수",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 30,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1366,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 370,
    "char_count": 1367,
    "created_at": "2025-08-02T07:56:39.545Z",
    "enrichments": {
      "embedded_text": "default: // 평균\n url = baseUrl + 'mock/bizMOB/' + className + '/' + sMethod + '.json?param=' + JSON.stringify(oMessage);\n break;\n }\n\n bizMOBWebCore.Http.fetch(url, option)\n .then(function (res) {\n bizMOBWebCore.Module.logger(className, sMethod, 'D', className + ' ' + sMethod + ' mock response.');\n if (sMethod === 'requestLogin') {\n var msg = Object.assign({}, res.data.body.legacy_message, {\n accessToken: res.data.body.accessToken,\n accessTokenExpTime: res.data.body.accessTokenExpTime,\n refreshToken: res.data.body.refreshToken,\n refreshTokenExpTime: res.data.body.refreshTokenExpTime,\n });\n call && call(msg);\n }\n else {\n call && call(res.data);\n }\n })\n .catch(function () {\n bizMOBWebCore.Module.logger(className, sMethod, 'E', className + ' ' + sMethod + ' mock not found.');\n call && call({ result: false, type: 'mock' });\n });\n};\n\n/**\n * timeout + retries + fetch\n * @param {string} url 요청 URL\n * @param {object} opt fetch 옵션\n * @param {number} limitTime Timeout 시간\n * @param {number} retries API 요청 회수\n *\n * @return\n * @param {boolean} ok 성공여부\n * @param {number} status 결과 코드 (200, 404, ...)\n * @param {string} statusText 결과 Text\n * @param {object} data 데이터\n */\nbizMOBWebCore.Http.fetch = function (url, opt, limitTime, retries) {\n var option = opt; // fetch option 셋팅\n var limit = limitTime || (60 * 1000); // timeout 시간\n var retry = retries || 1; // 재요청 회수"
    }
  },
  {
    "id": "171bd2ec_0031",
    "content": "// Fetch 요청 Promise\n var attemptFetch = function (url, opt) {\n return new Promise(function (resolve, reject) {\n fetch(url, opt).then(function (res) {\n if (res.ok) {\n resolve(res.json());\n }\n else {\n reject(res);\n }\n });\n });\n };\n\n // Timeout 제한 Promise\n var timeout = function (timeout) {\n return new Promise(function (_, reject) {\n setTimeout(function () { reject(new Error('timeout error')); }, timeout);\n });\n };\n\n // Promise 객체 Return\n return new Promise(function (resolve, reject) {\n var attempts = 1;\n var executeFetch = function () {\n var fetchAttempt = Promise.race([attemptFetch(url, option), timeout(limit)]); // 요청 경쟁\n var maxRetry = retry; // 최대 리트라이 회수\n\n // Fetch 요청\n fetchAttempt\n .then(function (data) {\n resolve({ ok: true, status: 200, statusText: 'OK', data: data });\n })\n .catch(function (res) {\n if (attempts < maxRetry) {\n attempts++;\n executeFetch(); // 재발송 회수만큼 재귀 호출\n }\n else {\n reject({ ok: res.ok, status: res.status, statusText: res.statusText, data: null });\n }\n });\n };\n\n // 요청 함수 실행\n executeFetch();\n });\n};",
    "metadata": {
      "source_file": "data/source/code/bizmob-sdk/core/bizMOB-core-web.js",
      "file_name": "bizMOB-core-web.js",
      "file_type": "js",
      "chunk_index": 31,
      "total_chunks": 32,
      "chunk_strategy": "code/bizmob-sdk",
      "chunk_size": 400,
      "overlap": 50,
      "original_metadata": {
        "word_count": 4296,
        "parsed_at": "2025-08-01T07:01:18.408647"
      },
      "position": {
        "start_char": -1,
        "end_char": 1036,
        "pages": [
          1
        ],
        "page": 1
      }
    },
    "tokens": 285,
    "char_count": 1037,
    "created_at": "2025-08-02T07:56:39.545Z",
    "enrichments": {
      "embedded_text": "// Fetch 요청 Promise\n var attemptFetch = function (url, opt) {\n return new Promise(function (resolve, reject) {\n fetch(url, opt).then(function (res) {\n if (res.ok) {\n resolve(res.json());\n }\n else {\n reject(res);\n }\n });\n });\n };\n\n // Timeout 제한 Promise\n var timeout = function (timeout) {\n return new Promise(function (_, reject) {\n setTimeout(function () { reject(new Error('timeout error')); }, timeout);\n });\n };\n\n // Promise 객체 Return\n return new Promise(function (resolve, reject) {\n var attempts = 1;\n var executeFetch = function () {\n var fetchAttempt = Promise.race([attemptFetch(url, option), timeout(limit)]); // 요청 경쟁\n var maxRetry = retry; // 최대 리트라이 회수\n\n // Fetch 요청\n fetchAttempt\n .then(function (data) {\n resolve({ ok: true, status: 200, statusText: 'OK', data: data });\n })\n .catch(function (res) {\n if (attempts < maxRetry) {\n attempts++;\n executeFetch(); // 재발송 회수만큼 재귀 호출\n }\n else {\n reject({ ok: res.ok, status: res.status, statusText: res.statusText, data: null });\n }\n });\n };\n\n // 요청 함수 실행\n executeFetch();\n });\n};"
    }
  }
]